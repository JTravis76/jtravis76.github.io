{"Articles":[{"Title":"Adding Mime Types to IIS Express","Markdown":"# Adding Mime Types to IIS Express\r\n\r\nOpen command prompt with administrator privilages.\r\nChange Directory to either;\r\n\r\n`C:\\Program Files\\IIS Express` or `C:\\Program Files (x86)\\IIS Express`\r\n\r\nRun following command to add `JSON` file extension.\r\n\r\n```bat\r\nappcmd set config /section:staticContent /+[fileExtension=\u0027.json\u0027,mimeType=\u0027application/x-javascript\u0027]\r\n```\r\n\r\nAlso, could browse and edit file located here: \r\n\r\n`C:\\Users\\\u003cUSERPROFILE\u003e\\Documents\\IISExpress\\config\\applicationhost.config`\r\n\r\nSearch for `staticContent` and add the following to allow JSON files to be process.\r\n\r\n```xml\r\n\u003cstaticContent\u003e\r\n    ...\r\n    \u003cmimeMap fileExtension=\".json\" mimeType=\"text/x-javascript\" /\u003e\r\n\u003c/staticContent\u003e    \r\n```","Link":"adding-mime-types-to-iis-express","Created":"8/27/2019","Category":"iis"},{"Title":"Ajax Control ToolKit","Markdown":"# Ajax Control ToolKit\r\n\r\n## How to use the Auto-Complete Extender\r\nThe below sample is to demostrate how to setup a auto-complete feature. You may see these in textboxes for searching, etc.\r\n\r\n```vb\r\nProtected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load\r\n    If Not IsPostBack Then\r\n        ...\r\n    End If\r\n\r\n    \u0027below is use with AJAXToolkit to pass a third param to filter the sql results\r\n    txtPickupFacility_AutoCompleteExtender.ContextKey = DropDown1.SelectedValue\r\nEnd Sub\r\n```\r\n\r\n```vb\r\n#Region \"WebMethods\"\r\n    \u0027\u003ccc1:AutoCompleteExtender ID=\"txtPickupFacility_AutoCompleteExtender\" runat=\"server\" CompletionInterval=\"500\"\r\n    \u0027    CompletionSetCount=\"25\" DelimiterCharacters=\"\" Enabled=\"True\" MinimumPrefixLength=\"1\"\r\n    \u0027    ServiceMethod=\"GetPickupFacilityList\" TargetControlID=\"txtPickupFacility\" UseContextKey=\"true\" \u003e\r\n    \u0027\u003c/cc1:AutoCompleteExtender\u003e\r\n\r\n    \u0027THE contextKey is assigned from code-behind.\r\n    \u003cSystem.Web.Services.WebMethod(True)\u003e\r\n    \u003cSystem.Web.Script.Services.ScriptMethod()\u003e\r\n    Public Shared Function GetPickupFacilityList(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As System.String()\r\n        Dim sql As String = \"SELECT PickupFacility FROM Request WHERE UserId = @UserId AND (PickupFacility LIKE @PickupFacility) ORDER BY PickupFacility\"\r\n\r\n\r\n        Dim da As System.Data.SqlClient.SqlDataAdapter = New System.Data.SqlClient.SqlDataAdapter(sql, ConfigurationManager.ConnectionStrings(\"db\").ConnectionString)\r\n        da.SelectCommand.Parameters.Add(\"@UserId\", SqlDbType.Int).Value = CInt(contextKey)\r\n        da.SelectCommand.Parameters.Add(\"@PickupFacility\", SqlDbType.VarChar, 50).Value = prefixText + \"%\"\r\n        Dim dt As DataTable = New DataTable()\r\n        da.Fill(dt)\r\n\r\n        Dim items As String()\r\n        ReDim items(dt.Rows.Count - 1)\r\n\r\n        Dim i As Integer = 0\r\n        For Each dr As DataRow In dt.Rows\r\n            items(i) = dr(0).ToString()\r\n            i = i + 1\r\n        Next\r\n\r\n        Return items\r\n    End Function\r\n#End Region\r\n```","Link":"ajax-control-toolkit","Created":"9/30/2019","Category":"aspdotnet"},{"Title":"Azure Devops CI CD","Markdown":"# Azure Devops CI/CD\r\n\r\n## Agents: Build | Release\r\n\r\nAgents can be use for both Build or Release defintions.\r\n\r\n* Build Definition\r\n  * setup tasks required for build\r\n  * setup triggers for auto building upon commits\r\n* Release Definition\r\n  * Setup rules for Artifacts and Enviroments\r\n  * Auto | Manual deployment with tags\r\n\r\n[Predefined Agent Variables](https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops\u0026tabs=yaml)\\\r\n[Self-hosted Windows Agents](https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/v2-windows?view=azure-devops)\r\n___\r\n## Installing Agents\r\n\r\nBelow sample script will install an agent named `PA13078-A1` in Agent Pool `PA13078` ans run as a service.\r\n```ps\r\n.\\config.cmd --pool \"PA13078\" --agent \"PA13078-A1\" --runasservice --work \u0027_work\u0027 --url \u0027http://ddptfs01:8080/tfs/\u0027 --auth Integrated\r\n```\r\n\r\nDeployment Groups\\\r\n_(Deployment Pools =\u003e Deployment Group =\u003e Project)_\r\n\r\n\u003e NOTE: Deployment Groups are for parallel installs for multi-servers. IIS Deployment tasks can ONLY be ran local to the IIS server. Cannot be push to remote IIS web servers.\r\n\r\n```ps\r\n.\\config.cmd --deploymentgroup --deploymentgroupname \"Deployment Pool 1\" --agent $env:COMPUTERNAME --runasservice --work \u0027_work\u0027 --url \u0027http://ddptfs01:8080/tfs/\u0027 --collectionname \u0027DefaultCollection\u0027 --projectname \u0027Toolbox\u0027 --auth Integrated;\r\n```\r\n\r\n### `_WORK` Directory:\r\n\r\nThe `_work` directory consist many folders to divide the work.\r\n\r\n* `_tasks` - downloaded tasks to be perform by agent based on pipline\r\n* `_tool` - a cache copy of Nuget and/or Node\r\n* `1` - first **build** project executed by agent\r\n  * `a` - publish artifacts folder\r\n  * `s` - project source from TFS\r\n* `r1` - first **release** project executed by agent\r\n  * `a` - downloaded artifacts folder\r\n\r\n### `_TOOL` Directory\r\nThe `_tool` directory consist of tools to assist in many building tasks, such as; nuget package restore, node/npm commands, etc;\r\n\r\nDepending on your corporate firewall policy, may need to add tools to the agent directory manually. Below are example for Nuget and NodeJs.\r\n\r\n\u003e**NOTE:** x64.complete is a empty file with the extension `.complete`\r\n\r\n```\r\n+ _tools\r\n\r\n+-- Nuget\r\n+---- 5.3.0\r\n+------ x64\r\n+-------- nuget.exe\r\n+------ x64.complete\r\n\r\n+-- Node\r\n+---- 12.13.1\r\n+------ x64\r\n+-------- node_modules\r\n+-------- node.exe\r\n+-------- npm\r\n+-------- npm.cmd\r\n+------ x64.complete\r\n```\r\n\r\nTo set a Enviroment path temporary, use the following Powershell.\r\n\r\n```powershell\r\nClear-Host\r\n# note the leading comma\r\n$env:Path += \";$(Agent.ToolsDirectory)\\Sass\\1.15.3\\x64\";\r\n\r\n#optional way, this will not append\r\n[System.Environment]::SetEnvironmentVariable(\"Path\", \"$(Agent.ToolsDirectory)\\_tool\\Sass\\1.15.3\\x64\", [System.EnvironmentVariableTarget]::Process);\r\n```\r\n___\r\n## Nuget\r\n\r\nIf a build requires restoring Nuget packages, must include `Nuget.config` in your project with the following package feeds.\r\n\r\n\u003e**Note:** `Nuget.config` is better place at root of repo to be shared across all branches. \r\n_This would resulting in downloading the root repo and cloaking other branches._ May also result in cloaking newly added branches \r\n\r\n```xml\r\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\r\n\u003cconfiguration\u003e\r\n  \u003csolution\u003e\r\n    \u003cadd key=\"disableSourceControlIntegration\" value=\"true\" /\u003e\r\n  \u003c/solution\u003e\r\n  \u003cconfig\u003e\r\n    \u003cadd key=\"repositoryPath\" value=\".\\packages\" /\u003e\r\n  \u003c/config\u003e\r\n  \u003cpackageSources\u003e\r\n    \u003cadd key=\"nuget.org\" value=\"https://www.nuget.org/api/v2/\" /\u003e\r\n    \u003cadd key=\"PORTS.Nuget\" value=\"http://devapps2/Ports.Nuget/nuget/\" /\u003e\r\n  \u003c/packageSources\u003e\r\n\u003c/configuration\u003e\r\n```\r\n\r\n### Nuget Restore vs. Dotnet Restore\r\nBoth restore works a bit differently. Nuget restore can restore packages for both Framework and Core projects, but Framework requires there is a `packages` directory within the solution for successful builds.\r\n\r\nDotnet restore is a wrapper around nuget.exe, but Core application reference packages from the `.nuget` folder of the user\u0027s profile. Therefore, does nnot need to be copied to solution prior to building. This action mainly updates the cache directory.\r\n\r\nAzure DevOps (on-premise) server needs access to download Nuget.exe and Packages.\r\n* https://dist.nuget.org/win-x86-commandline/v5.3.0/nuget.exe\r\n* https://www.nuget.org/api/v2 \r\n\r\n\u003e When working off-line or disconnected from internet, MUST use a cache directory. _This directory can be quite large, several GB+_\r\n\r\nNuget.exe cache directory for agents.\r\n```\r\n- _work\r\n-- _tool\r\n--- NuGet\r\n---- 5.3.0\r\n----- x64.complete (empty file)\r\n----- x64\r\n------ nuget.exe\r\n```\r\n\r\n\u003e If desire a certain Nuget.exe version used by Visual Studio. Click Help-\u003e About Microsoft Visual Studio  scroll to `Nuget Package Manager`\r\n\r\n**Nuget Package Cache**\r\n\r\nPre-downloaded packages can be placed in the following user\u0027s directory running the agent service.\r\n\r\n```\r\nC:\\Users\\\u003cUSER\u003e\\.nuget\\packages\r\n```\r\n\r\n___\r\n## NPM Powershell Tasks\r\n\r\nBelow task will create a NPM shrinkwrap file due to security risk with tar@2.0.0.\r\nInstall packages and finally execute NPM scripts\r\n\r\n```ps\r\nNew-Item -Path . -Name \"npm-shrinkwrap.json\" -ItemType \"file\" -Value \u0027{\"lockfileVersion\": 1,\"dependencies\": {\"tar\": {\"version\": \"2.0.0\",\"from\": \"tar@^2.0.0\",\"dependencies\": {\"connect\": {\"version\": \"3.0.0\",\"from\": \"tar@^2.0.0\"}}}}}\u0027;\r\nnpm install node-sass@4.13.0 rollup@1.27.8\r\nnpm install\r\nnpm run tsc\r\nnpm run build\r\n```\r\n\r\nMay need to remove the VUEX type definition when using strongly-typed store.\r\n\r\n```ps\r\n# remove VUEX type definition\r\n$path = \"$(Build.SourcesDirectory)\\node_modules\\vuex\\types\\vue.d.ts\"\r\n\r\nif (Test-Path -Path $path -PathType Leaf) \r\n{\r\n    Remove-Item -Path $path -Force\r\n}\r\n```\r\n\r\nUpdate assembly information with Build and Revision (ChangeSet) numbers.\r\n```ps\r\n$path = \"$(Build.SourcesDirectory)\\$(Build.DefinitionName)\\Source\\WISE.Api\\Properties\\AssemblyInfo.cs\"\r\n$a = Get-Content -Raw -Path $path\r\n\r\nif ($a -match \u0027\\d+.\\d+.\\d+.\\d+\u0027)\r\n{\r\n    $b = $Matches[0].Split(\u0027.\u0027)\r\n\r\n    if ($b.Count -gt 0)\r\n    {\r\n        $z = \"\"\r\n        # Get ONLY the Major and Minor Version\r\n        for ($c = 0; $c -lt $b.Length - 2; $c++)\r\n        {\r\n            $z += ($b.Item($c) + \".\")\r\n        }\r\n\r\n        # Add Build and Revision (ChangeSet)\r\n        $z += (\"$(Build.BuildNumber)\" + \".\" + \"$(Build.SourceVersion)\")\r\n\r\n        $a = $a.Replace($Matches[0], $z)\r\n    }\r\n}\r\nelse\r\n{\r\n    # Writes an error to build summary and log it in red text\r\n    Write-Host  \"##vso[task.LogIssue type=error;]Fail to update version\"\r\n    exit 1\r\n}\r\n\r\nSet-Content -Path $path -Value $a -Force -Encoding UTF8\r\n```\r\n\r\nUpdate Vue JS configuration information with Build and Revision (ChangeSet) numbers.\r\n```ps\r\n$path = \"$(Build.SourcesDirectory)\\src\\store\\modules\\configuration.ts\"\r\n$a = Get-Content -Raw -Path $path\r\n\r\n# Update Base URL with port pattern\r\n$a = $a -replace \u0027http://localhost:\\d+/\u0027, $Env:BaseApi\r\n\r\n# Update Enviroment\r\n$a = $a.Replace(\u0027LOCAL\u0027, $Env:Enviroment)\r\n\r\n# Update Netcenter API\r\n$a = $a.Replace(\u0027http://netcenterapidev/\u0027, $Env:NetcenterApi)\r\n\r\n# Update Version with Build \u0026 Revision (ChangeSet) number\r\nif ($a -match \u0027\\d+.\\d+.\\d+.\\d+\u0027)\r\n{\r\n    $b = $Matches[0].Split(\u0027.\u0027)\r\n\r\n    if ($b.Count -gt 0) \r\n    {\r\n        $z = \"\"\r\n        # Only fetch the Major and Minor version\r\n        for ($d = 0; $d -lt ($b.Length - 2); $d++)\r\n        {\r\n            $z += ($b.item($d) + \".\")\r\n        }\r\n        $z += (\"$(Build.BuildNumber)\" + \u0027.\u0027 + \"$(Build.SourceVersion)\")\r\n\r\n        $a = $a.Replace($Matches[0], $z)\r\n    }\r\n}\r\nelse\r\n{\r\n    # Writes an error to build summary and to log in red text\r\n    Write-Host  \"##vso[task.LogIssue type=error;]Fail to update version\"\r\n    exit 1\r\n}\r\n\r\nSet-Content -Path $path -Value $a -Force -Encoding UTF8\r\n```\r\n\r\nWhen publishing a front-end web application in the public folder.\r\n\u003e This script is use BEFORE any MSBUILD task to pack a website with a `*.publishproj`\r\n\r\n```ps\r\nClear-Host\r\n$name = \"*.publishproj\"\r\n$path = (\"$(Build.SourcesDirectory)\\\" + $name)\r\n$dest = (\"$(Build.SourcesDirectory)\\public\\\")\r\n\r\nMove-Item -Path $path -Destination $dest -Force\r\n\r\n# Clean publish folder\r\nif (Test-Path -Path \"$(Build.SourcesDirectory)\\App_Data\\publish\" -PathType Container)\r\n{\r\n    Remove-Item -Path \"$(Build.SourcesDirectory)\\App_Data\\publish\" -Recurse\r\n}\r\n```\r\n\r\nSetup a temporary enviroment path to a tool.\r\n\r\n```ps\r\nClear-Host\r\n# NOTE the leading comma\r\n$env:Path += \";$(Agent.ToolsDirectory)\\Sass\\1.15.3\\x64\";\r\n\r\n# now able to run the command\r\nsass \"\\wwwroot\\scss\\index.scss\" \"\\wwwroot\\css\\site.css\" --no-source-map\r\n```\r\n\r\nSetup vue to use minified version for QA/Prod depolyments:\r\n\r\n\u003e NOTE: this currently for requiredjs config\r\n\r\n```ps\r\nClear-Host\r\n\r\n$path = \"$(Build.SourcesDirectory)\\index.html\"\r\n$a = Get-Content -Raw -Path $path\r\n\r\n\u003c# Look for vue in a requirejs.config() object \r\n    and set to use minified version\r\n#\u003e\r\nif ($a -match \u0027(\"vue\": \"vue\",)\u0027)\r\n{\r\n    $a = $a -replace \u0027\"vue\": \"vue\",\u0027, \u0027\"vue\": \"vue.min\",\u0027\r\n    $a = $a -replace \u0027urlArgs:\u0027, \u0027//urlArgs:\u0027\r\n}\r\nelse\r\n{\r\n    # Writes to build summary\r\n    Write-Host  \"##vso[task.LogIssue type=warning;]Fail to set requirejs config.\"\r\n    #exit 1\r\n}\r\n\r\nSet-Content -Path $path -Value $a -Force -Encoding UTF8\r\n```\r\n___\r\n## MSBUILD\r\nMSBuild is use to compile project codes into assemblies.\r\n\r\nHere are some basic properties switches:\r\n```\r\n/p:DeployOnBuild=true \r\n/p:WebPublishMethod=Package | FileSystem\r\n/p:PackageAsSingleFile=true \r\n/p:SkipInvalidConfigurations=true \r\n/p:PackageLocation=\"$(build.artifactstagingdirectory)\\\\\"\r\n/p:PublishUrl=\"$(build.artifactstagingdirectory)\\\\\"\r\n/p:OutputPath=\"$(build.artifactstagingdirectory)\\\\\"\r\n/p:DeleteExistingFiles=True\r\n\r\n/p:LastUsedBuildConfiguration=\"Release\" \r\n/p:LastUsedPlatform=\"Any CPU\"\r\n\r\n# SLN files\r\n/p:Configuration=Release /p:Platform=\"Any CPU\"\r\n\r\n# Use a Publishing profile\r\n/p:PublishProfile=\"**\\App_Data\\PublishProfiles\\Website.pubxml\"\r\n```\r\n\r\n### Build specific targets in solutions by using MSBuild.exe\r\n[MS weblink](https://docs.microsoft.com/en-us/visualstudio/msbuild/how-to-build-specific-targets-in-solutions-by-using-msbuild-exe?view=vs-2019)\r\n\r\n\u003e Specify the target after the -target: switch in the format \u003cProjectName\u003e:\u003cTargetName\u003e. If the project name contains any of the characters %, $, @, ;, ., (, ), or \u0027, replace them with an _ in the specified target name.\r\n\r\n```\r\nmsbuild.exe \u003cSolutionName\u003e.sln -target:Database\\Toolbox_DB:Rebuild;Database\\Toolbox_DB:Clean\r\n```\r\n\r\n___\r\n## DotNet Core\r\n\r\nAssembly version is stored in the *.csproj file.\r\n\r\n\u003e NOTE: if project version is default `1.0.0`, it is ignored from this file.\r\n\r\nTo meet the requirements for proper versioning, add the additional Revision.\r\n\r\n```xml\r\n  \u003cPropertyGroup\u003e\r\n    \u003cTargetFramework\u003enetcoreapp2.1\u003c/TargetFramework\u003e\r\n    \u003cVersion\u003e1.0.0.0\u003c/Version\u003e\r\n  \u003c/PropertyGroup\u003e\r\n```\r\n\r\nWhen using MSBUILD to publish, must first run `dotnet restore` before running `msbuild /m `\r\n\r\n\u003eNote: when working with mutiple SDK of Net Core, place a `global.json` file at root of branch.\r\n\r\n```json\r\n{\r\n  \"sdk\": {\r\n    \"version\": \"2.1.510\"\r\n  }\r\n}\r\n```\r\n\r\n### Known Issues\r\nBuild was failing when executed from another drive (E:) instead of (C:) where the SDK installed.\r\n\r\nCould be related to a fallback path not reachable.\r\n```xml\r\n\u003cItemGroup\u003e\r\n    \u003cReference Include=\"Microsoft.AspNetCore.Http.Features\"\u003e\r\n        \u003cHintPath\u003e..\\..\\..\\..\\..\\..\\..\\..\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http.features\\2.1.1\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.Features.dll\u003c/HintPath\u003e\r\n    \u003c/Reference\u003e\r\n\u003c/ItemGroup\u003e\r\n```\r\n\r\n[Solution] Replacing with a Nuget package.\r\n```xml\r\n\u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"Microsoft.AspNetCore.Http.Features\" Version=\"2.1.1\" /\u003e\r\n\u003c/ItemGroup\u003e\r\n```  \r\n\r\n```\r\nBuild FAILED.\r\n\r\n    \"E:\\agents\\A2\\_work\\5\\s\\UMAS-DEV-CI\\Development\\Source\\UMAS.sln\" (UMAS_Api target) (1) -\u003e\r\n    \"E:\\agents\\A2\\_work\\5\\s\\UMAS-DEV-CI\\Development\\Source\\UMAS.Api\\UMAS.Api.csproj\" (default target) (2) -\u003e\r\n    \"E:\\agents\\A2\\_work\\5\\s\\UMAS-DEV-CI\\Development\\Source\\UMAS.Infrastructure\\UMAS.Infrastructure.csproj\" (default\r\n    target) (4:2) -\u003e\r\n    (ResolveAssemblyReferences target) -\u003e\r\n        C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\Bin\\Microsoft.Common.CurrentVers\r\n    ion.targets(2110,5): warning MSB3245: Could not resolve this reference. Could not locate the assembly \"Microsoft\r\n    .AspNetCore.Http.Features\". Check to make sure the assembly exists on disk. If this reference is required by you\r\n    r code, you may get compilation errors. [E:\\agents\\A2\\_work\\5\\s\\UMAS-DEV-CI\\Development\\Source\\UMAS.Infrastructu\r\n    re\\UMAS.Infrastructure.csproj]\r\n\r\n\r\n    \"E:\\agents\\A2\\_work\\5\\s\\UMAS-DEV-CI\\Development\\Source\\UMAS.sln\" (UMAS_Api target) (1) -\u003e\r\n    \"E:\\agents\\A2\\_work\\5\\s\\UMAS-DEV-CI\\Development\\Source\\UMAS.Api\\UMAS.Api.csproj\" (default target) (2) -\u003e\r\n    \"E:\\agents\\A2\\_work\\5\\s\\UMAS-DEV-CI\\Development\\Source\\UMAS.Infrastructure\\UMAS.Infrastructure.csproj\" (default\r\n    target) (4:2) -\u003e\r\n    (CoreCompile target) -\u003e\r\n        Interfaces\\IMedia.cs(28,36): error CS0234: The type or namespace name \u0027AspNetCore\u0027 does not exist in the names\r\n    pace \u0027Microsoft\u0027 (are you missing an assembly reference?) [E:\\agents\\A2\\_work\\5\\s\\UMAS-DEV-CI\\Development\\Source\r\n    \\UMAS.Infrastructure\\UMAS.Infrastructure.csproj]\r\n        Services\\Documentum\\DocumentumSvc.cs(261,43): error CS0234: The type or namespace name \u0027AspNetCore\u0027 does not e\r\n    xist in the namespace \u0027Microsoft\u0027 (are you missing an assembly reference?) [E:\\agents\\A2\\_work\\5\\s\\UMAS-DEV-CI\\D\r\n    evelopment\\Source\\UMAS.Infrastructure\\UMAS.Infrastructure.csproj]\r\n```\r\n\r\n## Appcmd.exe\r\n---\r\n\r\nAppcmd.exe is located at this directory; `C:\\Windows\\System32\\inetsrv`\r\n\r\nTo set windows authentication\r\n\r\n```cmd\r\nappcmd.exe set config \"Default Web Site/SiteName\" /section:windowsAuthentication /enabled:true /commit:apphost\r\n```\r\n\r\nTo set binding on a Site\r\n\r\n\u003e NOTE: may also use DNS CNAME\r\n\r\n```cmd\r\nappcmd.exe set site \"SiteName\" /bindings:http/*:80:yourcustomdomain.com\r\n```\r\n\r\n___\r\n## Deploying DACPAC with SqlPackage.exe\r\n\r\n\u003e Be sure to have the latest release build of DACPAC before beginning.\r\n\r\n```\r\nmsbuild \"C:\\Users\\\u003c%USERPROFILE%\u003e\\source\\Workspaces\\WasteContainer\\Development\\Source\\WasteContainer.sln\" -target:Database\\WasteContainer_DB /p:Configuration=Release /p:Platform=\"Any CPU\"\r\n```\r\n\r\nOnce installed on the computer/SQL server, located here: \"C:\\Program Files\\Microsoft SQL Server\\150\\DAC\\bin\\SqlPackage.exe\".\r\nWas able to test against the (localdb)\\MSSQLLocalDB version.\r\nWhen passing a profile XML as one of the command switches, the following results were noted:\r\n\r\n_Test results from Azure Devops CD_\r\n* publish.xml -\u003e TargetConnectionString with `Integrated Security=True;` passed successfully but could **not** located the database nor table on SQL server.\r\n* publish.xml -\u003e TargetConnectionString with `User ID=sa;Password=****;` failed with error that \"Login failed for user \u0027sa\u0027\"\r\n\r\nHowever, running the command locally on the computer/SQL Server worked both ways.\r\n\r\n\u003e NOTE. Before running the below command, could generate the insert scripts prior to publishing.  \r\nThis was performed in DEV to restore the existing data after the DACPAC updates were applied.\r\n\r\nFull example of command:\r\n```\r\n\"C:\\Program Files\\Microsoft SQL Server\\150\\DAC\\bin\\SqlPackage.exe\" /action:publish /sourcefile:\"E:\\Toolbox.DB.dacpac\" /profile:\"E:\\Toolbox.DB.publish.xml\"\r\n```\r\n\r\n**Drawbacks:**\r\n* Agent would need to be installed on each SQL Server.\r\n* Although DACPAC can create new database, may need to pre-setup with desired user id and password to control permissions.\r\n\r\n## Further local testing with DACPAC\r\n\r\nFound that DACPAC with Create, Update, and apply post-scripts. Also provide errors if attempting to change a column\r\nname, apply the same script to insert records on table with constraints\r\n\r\n\r\n# WimRM - Sql DacpacDeploy\r\n\r\nWinRM HTTP port: 5985\r\nWinRM HTTPS port: 5986\r\n\r\n\r\n\r\n\r\nagent.diagnostic = true\r\n\r\n\r\n# Release - Continous Delivery CD\r\n\r\n## Variable Library\r\n\r\n\u003e NOTE: when using a variable library in a Release, the values are copied. In an event of an error, will need to create a new Release once the error has been corrected.\r\n\r\nWhen using service account for release tasks, based on company policies. Could prevent internet firewall proxy from working.","Link":"azure-devops-ci-cd","Created":"5/12/2020","Category":"azure"},{"Title":"Convert Hex string to Char string","Markdown":"# Convert Hex string to Char string\r\n\r\nFrom Javascript:\r\n\r\n```js\r\nvar value = String.fromCharCode(\"0x2265\");\r\n```\r\n\r\nFrom C#:\r\n\r\n```c#\r\nstring value = (char)Int16.Parse(\"0x2265\", System.Globalization.NumberStyles.AllowHexSpecifier) ;\r\n\r\nstring value = (char)Int16.Parse(\"2265\", System.Globalization.NumberStyles.AllowHexSpecifier);\r\n```","Link":"convert-hex-string-to-char-string","Created":"3-18-2020","Category":"other"},{"Title":"CORS Setup - .NET Framework","Markdown":"# CORS Setup - Framework\r\nBelow are details to setting up CORS Without using any nuget packages nor helpers.\r\n\r\nweb.config\r\n\r\n```xml\r\n\u003csystem.webServer\u003e\r\n  ...\r\n    \u003chttpProtocol\u003e\r\n      \u003ccustomHeaders\u003e\r\n        \u003c!-- CANNOT Use wildcard when using withCredentials --\u003e\r\n        \u003c!--\u003cadd name=\"Access-Control-Allow-Origin\" value=\"*\" /\u003e--\u003e\r\n        \u003cadd name=\"Access-Control-Allow-Origin\" value=\"http://localhost:1337\" /\u003e\r\n\r\n        \u003cadd name=\"Access-Control-Allow-Headers\" value=\"Content-Type\" /\u003e\r\n        \r\n        \u003cadd name=\"Access-Control-Allow-Methods\" value=\"*\" /\u003e\r\n        \u003c!--\u003cadd name=\"Access-Control-Allow-Methods\" value=\"GET,POST,PUT,DELETE,OPTIONS\" /\u003e--\u003e\r\n\r\n        \u003cadd name=\"Access-Control-Allow-Credentials\" value=\"true\" /\u003e\r\n      \u003c/customHeaders\u003e\r\n    \u003c/httpProtocol\u003e\r\n  ..\r\n\u003c/system.webServer\u003e\r\n```\r\n\r\n* When using wildcard \"*\" with `Access-Control-All-Origin`, \r\n\tChrome throws error that CORS policy doesn\u0027t accept wildcards.\r\n\tThis happens when using `Access-Control-Allow-Credentials` is set to TRUE\r\n* When using an actual URL, all GET methods works.\r\n* All OPTIONS preflight fails with 405 Method Not Allowed. Even with an Authorization header\r\n* Adding [OPTIONS] verb to controller/route (ex: [AcceptVerbs(\"POST\",\"OPTIONS\")]), preflight fails with 415 Unsupported Media Type\r\n\r\n\r\nNow using CORS Delegation handler in conjunction with web.config settings\r\n\r\n* While using both, Chrome throws a new error: The \u0027Access-Control-Allow-Origin\u0027 header contains multiple values...\r\n\r\n\r\nCorsDelegateHandler.cs\r\n```cs\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Net;\r\nusing System.Net.Http;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing System.Web;\r\n\r\nnamespace WISE.Api\r\n{\r\n    /// \u003csummary\u003e\r\n    /// \r\n    /// \u003c/summary\u003e\r\n    public class CorsDelegateHandler : DelegatingHandler\r\n    {\r\n        const string Origin = \"Origin\";\r\n        const string AccessControlRequestMethod = \"Access-Control-Request-Method\";\r\n        const string AccessControlRequestHeaders = \"Access-Control-Request-Headers\";\r\n        const string AccessControlAllowOrigin = \"Access-Control-Allow-Origin\";\r\n        const string AccessControlAllowMethods = \"Access-Control-Allow-Methods\";\r\n        const string AccessControlAllowHeaders = \"Access-Control-Allow-Headers\";\r\n\r\n        /// \u003csummary\u003e\r\n        /// \r\n        /// \u003c/summary\u003e\r\n        /// \u003cparam name=\"request\"\u003e\u003c/param\u003e\r\n        /// \u003cparam name=\"cancellationToken\"\u003e\u003c/param\u003e\r\n        /// \u003creturns\u003e\u003c/returns\u003e\r\n        protected override Task\u003cHttpResponseMessage\u003e SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n        {\r\n            bool isCorsRequest = request.Headers.Contains(Origin);\r\n            bool isPreflightRequest = request.Method == HttpMethod.Options;\r\n            if (isCorsRequest)\r\n            {\r\n                if (isPreflightRequest)\r\n                {\r\n                    HttpResponseMessage response = new HttpResponseMessage(HttpStatusCode.NoContent);\r\n                    /*== NOTE: cannot use Access-Control-Allow-Origin in web.config conjuction. May result in duplicate header values ==*/\r\n                    response.Headers.Add(AccessControlAllowOrigin, request.Headers.GetValues(Origin).First());\r\n\r\n                    /*== Not seeing this is required for preflight, since the web.config will be source of truth ==*/\r\n                    //string accessControlRequestMethod = request.Headers.GetValues(AccessControlRequestMethod).FirstOrDefault();\r\n                    //if (accessControlRequestMethod != null)\r\n                    //{\r\n                    //    response.Headers.Add(AccessControlAllowMethods, accessControlRequestMethod);\r\n                    //}\r\n\r\n                    //string requestedHeaders = string.Join(\",\", request.Headers.GetValues(AccessControlRequestHeaders));\r\n                    //if (!string.IsNullOrEmpty(requestedHeaders))\r\n                    //{\r\n                    //    response.Headers.Add(AccessControlAllowHeaders, requestedHeaders);\r\n                    //}\r\n\r\n                    TaskCompletionSource\u003cHttpResponseMessage\u003e tcs = new TaskCompletionSource\u003cHttpResponseMessage\u003e();\r\n                    tcs.SetResult(response);\r\n                    return tcs.Task;\r\n                }\r\n                else\r\n                {\r\n                    return base.SendAsync(request, cancellationToken).ContinueWith\u003cHttpResponseMessage\u003e(t =\u003e\r\n                    {\r\n                        HttpResponseMessage resp = t.Result;\r\n                        /*== NOTE: cannot use Access-Control-Allow-Origin in web.config conjuction. May result in duplicate header values ==*/\r\n                        resp.Headers.Add(AccessControlAllowOrigin, request.Headers.GetValues(Origin).First());\r\n                        return resp;\r\n                    });\r\n                }\r\n            }\r\n            else\r\n            {\r\n                return base.SendAsync(request, cancellationToken);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n```\r\n\r\n\r\nGlobal.asax.cs\r\n```cs\r\nprotected void Application_Start()\r\n{\r\n    GlobalConfiguration.Configure(WebApiConfig.Register);\r\n    GlobalConfiguration.Configuration.MessageHandlers.Add(new CorsDelegateHandler());\r\n    ...\r\n}\r\n```","Link":"cors-setup---.net-framework","Created":"5/12/2020","Category":"netframework"},{"Title":"FileSystemWatcher","Markdown":"# FileSystemWatcher\r\n\r\nFileSystemWatcher is a Microsoft [class](https://docs.microsoft.com/en-us/dotnet/api/system.io.filesystemwatcher?view=netframework-4.8). \r\n\r\nNeeded the ability to watch changes for a directory of Typescript files. Below is an example from a console application I was playing with.\r\n\r\n\u003e NOTE: FileSystemWatcher will not fired when both Modfied Date and Last Access date are update together\r\n\r\n```csharp\r\n[System.Security.Permissions.PermissionSet(System.Security.Permissions.SecurityAction.Demand, Name = \"FullTrust\")]\r\nstatic void Main(string[] args)\r\n{\r\n    System.IO.FileSystemWatcher watcher = new System.IO.FileSystemWatcher\r\n    {\r\n        Path = @\"C:\\Directory\\\",\r\n        NotifyFilter = System.IO.NotifyFilters.LastWrite,\r\n        Filter = \"*.txt\",\r\n        IncludeSubdirectories = false\r\n    };\r\n\r\n    watcher.Error += OnError;\r\n    watcher.Changed += new System.IO.FileSystemEventHandler(OnChanged);\r\n    watcher.EnableRaisingEvents = true;\r\n\r\n\r\n    // Wait for the user to quit the program.\r\n    System.Console.WriteLine(\"Press \\\u0027q\\\u0027 to quit the sample.\");\r\n    while (System.Console.Read() != \u0027q\u0027) ;\r\n}\r\n\r\n\r\nprivate static void OnChanged(object source, System.IO.FileSystemEventArgs e)\r\n{\r\n    watcher.EnableRaisingEvents = false;\r\n\r\n    //TODO: Your Code Here ----\u003e\r\n\r\n    watcher.EnableRaisingEvents = true;\r\n}\r\n\r\nstatic void OnError(object sender, System.IO.ErrorEventArgs e)\r\n{\r\n    System.Exception ex = e.GetException();\r\n    System.Console.WriteLine(ex.Message);\r\n    if (ex.InnerException != null)\r\n    {\r\n        System.Console.WriteLine(ex.InnerException);\r\n    }\r\n}\r\n```","Link":"filesystemwatcher","Created":"3-18-2020","Category":"dotnetframework"},{"Title":"JQuery Ajax Snippet","Markdown":"# JQuery Ajax Snippet\r\n\r\nCode snippets is a feature in Visual Studio to help speed development by providing common used function.\r\n\r\n\u003e Shortcut menu can be displayed by pressing `Ctrl+K` `Ctrl+X` within an open document in Visual Studio.\r\n\r\nBelow is a custom Typescript snippet for Visual Studio to generate code for a JQuery Ajax function.  \r\nCreate a `jQueryAjax.snippet` file and paste content below. \r\nThen move file to `~\\Documents\\Visual Studio NNNN\\Code Snippets\\TypeScript\\My Code Snippets`.\r\n\r\n```xml\r\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e  \r\n\u003cCodeSnippets  xmlns=\"http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet\"\u003e  \r\n    \u003cCodeSnippet Format=\"1.0.0\"\u003e  \r\n        \u003cHeader\u003e  \r\n          \u003cTitle\u003ejQuery Ajax\u003c/Title\u003e\r\n\t\t\t    \u003cAuthor\u003eJeremy Travis\u003c/Author\u003e  \r\n\t\t\t    \u003cDescription\u003eCode snippet for jQuery Ajax with basic options\u003c/Description\u003e\r\n\t\t\t    \u003cShortcut\u003eajax\u003c/Shortcut\u003e\r\n          \u003cSnippetTypes\u003e\r\n            \u003cSnippetType\u003eExpansion\u003c/SnippetType\u003e\r\n            \u003cSnippetType\u003eSurroundsWith\u003c/SnippetType\u003e\r\n          \u003c/SnippetTypes\u003e\r\n        \u003c/Header\u003e  \r\n        \u003cSnippet\u003e\r\n          \u003cDeclarations\u003e\r\n            \u003cLiteral\u003e\r\n              \u003cID\u003etype\u003c/ID\u003e\r\n              \u003cToolTip\u003eType\u003c/ToolTip\u003e\r\n              \u003cDefault\u003ePOST\u003c/Default\u003e\r\n            \u003c/Literal\u003e\r\n            \u003cLiteral\u003e\r\n              \u003cID\u003evar\u003c/ID\u003e\r\n              \u003cToolTip\u003eSome model variable\u003c/ToolTip\u003e\r\n              \u003cDefault\u003emyModel\u003c/Default\u003e\r\n            \u003c/Literal\u003e\r\n          \u003c/Declarations\u003e\r\n            \u003cCode Language=\"TypeScript\" Kind=\"any\" Delimiter=\"%\"\u003e \r\n              \u003c![CDATA[\r\n$.ajax({\r\n    url: \u0027@Url.Action(\"ACTION\", \"CONTROLLER\")\u0027,\r\n\ttype: \"%type%\",\r\n\tcache: false,\r\n\tasync: true,\r\n\tdata: { model: %var% },\r\n\t\r\n\t//Optional\r\n\tcontentType: \"application/json; charset=utf-8\", //inform the server what data type you are sending to the server\r\n\tdataType: \"json\", //This specifies the type of data you are expecting from the server. (i.e. not the datatype that you are sending to the server)\r\n\t\t\t\t\r\n\tbeforeSend: function() { },\r\n\tcomplete: function () { },\r\n\tsuccess: function (data) {\r\n\t\tconsole.log(data);\r\n    if (data.success === undefined) {\r\n        DisplayHtmlError(data);\r\n    }\r\n    else if (!data.success) {\r\n        DisplayVaildationSummary(\"div-err\", data.message);\r\n    }\r\n    else \r\n        window.location.reload();\r\n        %selected%\r\n\t},\r\n\terror: function (xhr, ajaxOptions, error) {\r\n      alert(xhr.responseText);\r\n    }\r\n});\r\n              ]]\u003e  \r\n            \u003c/Code\u003e  \r\n        \u003c/Snippet\u003e  \r\n    \u003c/CodeSnippet\u003e  \r\n\u003c/CodeSnippets\u003e  \r\n```","Link":"jquery-ajax-snippet","Created":"4-22-2020","Category":"visualstudio"},{"Title":"JQuery On Snippet","Markdown":"# JQuery On Snippet\r\n\r\nCode snippets is a feature in Visual Studio to help speed development by providing common used function.\r\n\r\n\u003e Shortcut menu can be displayed by pressing `Ctrl+K` `Ctrl+X` within an open document in Visual Studio.\r\n\r\nBelow is a custom Typescript snippet for Visual Studio to generate code for a JQuery OnClick function.  \r\nCreate a `FileName.snippet` file and paste content below. \r\nThen move file to `~\\Documents\\Visual Studio NNNN\\Code Snippets\\TypeScript\\My Code Snippets`.\r\n\r\nPersonally, find it better to bind the click event to the document with a selector to match. This allows events to be trigger from multiple HTML elements.\r\n\r\n```xml\r\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e  \r\n\u003cCodeSnippets  xmlns=\"http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet\"\u003e  \r\n    \u003cCodeSnippet Format=\"1.0.0\"\u003e  \r\n        \u003cHeader\u003e  \r\n          \u003cTitle\u003ejQuery OnClick\u003c/Title\u003e\r\n\t\t\t    \u003cAuthor\u003eJeremy Travis\u003c/Author\u003e  \r\n\t\t\t    \u003cDescription\u003eCode snippet for jQuery OnClick\u003c/Description\u003e\r\n\t\t\t    \u003cShortcut\u003ejqon\u003c/Shortcut\u003e\r\n          \u003cSnippetTypes\u003e\r\n            \u003cSnippetType\u003eExpansion\u003c/SnippetType\u003e\r\n            \u003cSnippetType\u003eSurroundsWith\u003c/SnippetType\u003e\r\n          \u003c/SnippetTypes\u003e\r\n        \u003c/Header\u003e  \r\n        \u003cSnippet\u003e\r\n          \u003cDeclarations\u003e\r\n            \u003cLiteral\u003e\r\n              \u003cID\u003eevent\u003c/ID\u003e\r\n              \u003cToolTip\u003eevent type\u003c/ToolTip\u003e\r\n              \u003cDefault\u003eclick\u003c/Default\u003e\r\n            \u003c/Literal\u003e\r\n            \u003cLiteral\u003e\r\n              \u003cID\u003eselector\u003c/ID\u003e\r\n              \u003cToolTip\u003eJQuery Selector\u003c/ToolTip\u003e\r\n              \u003cDefault\u003e#btn-\u003c/Default\u003e\r\n            \u003c/Literal\u003e\r\n          \u003c/Declarations\u003e\r\n            \u003cCode Language=\"TypeScript\" Kind=\"any\" Delimiter=\"%\"\u003e \r\n              \u003c![CDATA[\r\n$(document).on(\u0027%event%\u0027, \u0027%selector%\u0027, function (e) {\r\n    e.stopImmediatePropagation();\r\n    let id = $(this).attr(\u0027data-id\u0027);\r\n});\r\n              ]]\u003e  \r\n            \u003c/Code\u003e  \r\n        \u003c/Snippet\u003e  \r\n    \u003c/CodeSnippet\u003e  \r\n\u003c/CodeSnippets\u003e  \r\n```","Link":"jquery-on-snippet","Created":"4-22-2020","Category":"visualstudio"},{"Title":"Launch IIS Express via Command Prompt","Markdown":"# Launch IIS Express via Command Prompt\r\n\r\nOften times I needed to host and test a web site locally. IIS Express installs with Visual Studio, does this very thing.\r\n\r\nSite Ids can be listed by viewing the `applicationhost.config` file.\r\n\r\nOpen command prompt.\r\n```bat\r\n@\"C:\\Program Files (x86)\\IIS Express\\iisexpress.exe\" /systray:true /config:C:\\Users\\\u003cUSERPROFILE\u003e\\Documents\\IISExpress\\config\\applicationhost.config /siteid:1\r\n```","Link":"launch-iis-express-via-command-prompt","Created":"3-18-2020","Category":"iis"},{"Title":"Netcenter Roles DI Extension","Markdown":"# Netcenter Roles DI Extension\r\n\r\nWhile setting up Windows Authentication and Authorization via .Net Core API application with EntityGraphQL (GraphQL service by Luke Murray), I needed to apply custom Security Claims to the User\u0027s identity.  \r\nBelow is example of how I wired up both middleware and application service to fetch roles then merge into the Windows Authenticated claims.\r\n\r\nNetcenter is an in-house API use to provide a centralized services for various task among our applications.\r\n\r\nThis option shows how we extend the application service.\r\n\r\n*Extensions/ApplicationEx.cs*\r\n```cs\r\nusing Microsoft.AspNetCore.Builder;\r\nusing Microsoft.AspNetCore.Diagnostics;\r\nusing Microsoft.AspNetCore.Http;\r\nusing System.Net;\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing System.Security.Claims;\r\nusing System.Linq;\r\n\r\nnamespace WebApplication1.Api.Extensions\r\n{\r\n    public static class ApplicationExt\r\n    {\r\n        /// \u003csummary\u003e\r\n        /// Add Netcenter Roles to User\u0027s Identity\r\n        /// \u003c/summary\u003e\r\n        /// \u003cparam name=\"app\"\u003e\u003c/param\u003e\r\n        public static void UseNetcenterRoles(this IApplicationBuilder app)\r\n        {\r\n            app.Use(async (context, next) =\u003e\r\n            {\r\n                if (context.User != null \u0026\u0026 context.User.Identity.IsAuthenticated)\r\n                {\r\n                    var claims = new System.Collections.Generic.List\u003cSystem.Security.Claims.Claim\u003e();\r\n\r\n                    //== Could fetch svc from app builder\r\n                    //var a = app.ApplicationServices.GetService\u003cNetcenter.Sdk.INetcenterSDK\u003e();\r\n\r\n                    var netcenter = context.RequestServices.GetService\u003cNetcenter.Sdk.INetcenterSDK\u003e();\r\n                    netcenter.UserAppRoleNames(context.User.Identity.Name)\r\n                        .ForEach(delegate (string role) {\r\n                            claims.Add(new Claim(ClaimTypes.Role, role));\r\n                        });\r\n\r\n                    // Doing this will require devs to merge identities in controller or services\r\n                    //var claimsIdentity = new System.Security.Claims.ClaimsIdentity(claims);\r\n                    //context.User.AddIdentity(claimsIdentity);\r\n\r\n                    //add new Role claims directly to default identity\r\n                    context.User.Identities.FirstOrDefault().AddClaims(claims);\r\n                }\r\n\r\n                await next();\r\n            });\r\n        }\r\n\r\n    }\r\n}\r\n\r\n```\r\n\r\nThis option uses a middleware class within the `ApplicationBuilder` that injects on every incoming route.\r\n\r\n*Extensions/NetcenterRoles.cs*\r\n```cs\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Security.Claims;\r\nusing System.Threading.Tasks;\r\nusing Microsoft.Extensions.DependencyInjection;\r\n\r\nnamespace WebApplication1.Api.Extensions\r\n{\r\n    public class NetcenterRoles\r\n    {\r\n        private readonly Microsoft.AspNetCore.Http.RequestDelegate _next;\r\n\r\n        /// \u003csummary\u003e\r\n        /// Middleware to add Netcenter Roles to User\u0027s Identity\r\n        /// \u003c/summary\u003e\r\n        /// \u003cparam name=\"next\"\u003e\u003c/param\u003e\r\n        public NetcenterRoles(Microsoft.AspNetCore.Http.RequestDelegate next)\r\n        {\r\n            _next = next;\r\n        }\r\n\r\n        public async System.Threading.Tasks.Task InvokeAsync(Microsoft.AspNetCore.Http.HttpContext httpContext)\r\n        {\r\n            if (httpContext.User != null \u0026\u0026 httpContext.User.Identity.IsAuthenticated)\r\n            {\r\n                var claims = new System.Collections.Generic.List\u003cSystem.Security.Claims.Claim\u003e();\r\n\r\n                var netcenter = httpContext.RequestServices.GetService\u003cNetcenter.Sdk.INetcenterSDK\u003e();\r\n                netcenter.UserAppRoleNames(httpContext.User.Identity.Name)\r\n                    .ForEach(delegate (string role) {\r\n                        claims.Add(new Claim(ClaimTypes.Role, role));\r\n                    });\r\n\r\n                // Doing this will require devs to merge identities in controller or services\r\n                //var claimsIdentity = new System.Security.Claims.ClaimsIdentity(claims);\r\n                //httpContext.User.AddIdentity(claimsIdentity);\r\n\r\n                //add new Role claims directly to default identity\r\n                httpContext.User.Identities.FirstOrDefault().AddClaims(claims);\r\n\r\n                await _next(httpContext);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\nFinally, we add/use the middleware in our `Startup.cs`.\r\n\r\n```cs\r\nusing Microsoft.AspNetCore.Builder;\r\nusing Microsoft.AspNetCore.Hosting;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing WebApplication1.Api.Extensions;\r\n\r\nnamespace WebApplication1.Api\r\n{\r\n    public class Startup\r\n    {\r\n        public IConfiguration Configuration { get; }\r\n\r\n\r\n        public Startup(IConfiguration configuration)\r\n        {\r\n            Configuration = configuration;\r\n        }\r\n\r\n        public void ConfigureServices(IServiceCollection services)\r\n        {\r\n            services.AddNetcenter(Configuration);\r\n            services.AddMVC();\r\n        }\r\n\r\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env)\r\n        {\r\n            if (env.IsDevelopment())\r\n            {\r\n                app.UseDeveloperExceptionPage();\r\n            }\r\n\r\n            /*== Could use either method here ==*/\r\n            //app.UseMiddleware\u003cNetcenterRoles\u003e();\r\n            app.UseNetcenterRoles();\r\n\r\n            app.UseMvc();\r\n        }\r\n    }\r\n}\r\n\r\n```","Link":"netcenter-roles-di-extension","Created":"5-12-2020","Category":"dotnetcore"},{"Title":"Reset a Forked Git Branch","Markdown":"# Reset a Forked Git branch\r\n\r\nWhile collaborating with fellow developers on Github, I find myself needing to updated my fork repository to match the original owner\u0027s repository. This is important to maintain clean up-to-date code while adding new features and bug fixes, especially after a pull request has been completed.\r\n\r\n\u003e Will need to have git installed. [link](https://git-scm.com/)\r\n\r\nAll steps are performed on MS Windows:\r\n* Open internet browser to __your__ forked repo; `master` branch\r\n* Copy \"Clone with HTTPS\" web url\r\n* Browse to a *clean* directory to clone your current `master` repository\r\n* Right-click to open context menu\r\n* Left-click `Git Bash here`\r\n* Type in `git clone ` and then paste in url you copied earlier, press Enter key\r\n    * ![image](./articles/img/git-fig1.png)\r\n* Once download completes, open internet browser to the original owner\u0027s repo that was forked.\r\n* Copy \"Clone with HTTPS\" web url. _Must be owner\u0027s repo, not your forked repo._\r\n* Back in Git Bash, type in the following: **Be sure to CD (Change Directory) into the downloaded repo directory**\r\n```bat\r\ncd ProjectRepoName\r\n\r\ngit remote add original https://github.com/\u003cOWNERS-REPO-URL\u003e.git\r\ngit fetch original\r\ngit checkout master\r\ngit reset --hard original/master  \r\ngit push origin master --force \r\n```\r\n\r\nAll done. Personally, I delete that directory create above to avoid confusion while working in my branch. Now merge up changes and submit a pull-request :)","Link":"reset-a-forked-git-branch","Created":"3-18-2020","Category":"git"},{"Title":"Simple Node Web Server","Markdown":"# Simple Node Web Server\r\n\r\nI wanted a simple web server while developing a front-end web application using Vue JS. Node Express was overkill, since I wasn\u0027t using it for production. IIS Express is alternative, but normally installed with Visual Studio. This server can be used with VS Code with the following command; `node server.js`\r\n\r\n\u003e To skip Typescript compiler, edit/replace `import` with `var`\r\n\r\n*server.ts*\r\n\r\n```ts\r\nimport http = require(\u0027http\u0027);\r\nimport fs = require(\u0027fs\u0027);\r\nconst port = process.env.port || 1337;\r\nconsole.log(\"Starting server on port \" + port);\r\n\r\nconst redirectPage = \u0027\u003c!DOCTYPE html\u003e\u003chtml\u003e\u003chead\u003e\u003cmeta charset=\"utf-8\" /\u003e\u003cmeta http-equiv=\"refresh\" content=\"0; url=./dist/\" /\u003e\u003ctitle\u003e\u003c/title\u003e\u003c/head\u003e\u003cbody\u003e\u003c/body\u003e\u003c/html\u003e\u0027;\r\n\r\nhttp.createServer(function (req, res) {\r\n    //console.log(req.method);\r\n    //console.log(req.url);\r\n    //console.log(req.headers);\r\n    //console.log(req.rawHeaders);\r\n    //TODO: remove query parameters ?para=value\r\n\r\n    //when empty, redirect\r\n    if (req.url === \"/\") {\r\n        res.writeHead(200, { \u0027Content-Type\u0027: \u0027text/html\u0027 });\r\n        res.write(redirectPage);\r\n        return res.end();\r\n    }\r\n\r\n    let url = \".\" + req.url;\r\n    let ext = \"\";\r\n    if (req.url.endsWith(\"/\")) {\r\n        url = `.${req.url}index.html`;\r\n        ext = \"html\";\r\n    }\r\n    else if (req.url === \"/favicon.ico\") {\r\n        //Chrome browser asking for icon\r\n        url = `./dist${req.url}`;\r\n        ext = \"ico\";\r\n    }\r\n    else if (req.url.lastIndexOf(\".\") \u003e -1) {\r\n        let s = req.url.split(\".\");\r\n        if (s.length \u003e 0) {\r\n            ext = s[s.length - 1];\r\n        }\r\n    }\r\n\r\n    switch (ext) {\r\n        case \"css\":\r\n            fs.readFile(url, function (err, data) {\r\n                res.writeHead(200, { \u0027Content-Type\u0027: \u0027text/css\u0027 });\r\n                res.write(data);\r\n                return res.end();\r\n            });\r\n            break;\r\n        case \"js\":\r\n            fs.readFile(url, function (err, data) {\r\n                res.writeHead(200, { \u0027Content-Type\u0027: \u0027application/javascript\u0027 });\r\n                res.write(data);\r\n                return res.end();\r\n            });\r\n            break;\r\n        case \"png\":\r\n            fs.readFile(url, function (err, data) {\r\n                res.writeHead(200, { \u0027Content-Type\u0027: \u0027image/png\u0027 });\r\n                res.write(data);\r\n                return res.end();\r\n            });\r\n            break;\r\n        case \"gif\":\r\n            fs.readFile(url, function (err, data) {\r\n                res.writeHead(200, { \u0027Content-Type\u0027: \u0027image/gif\u0027 });\r\n                res.write(data);\r\n                return res.end();\r\n            });\r\n            break;\r\n        case \"jpg\":\r\n            fs.readFile(url, function (err, data) {\r\n                res.writeHead(200, { \u0027Content-Type\u0027: \u0027image/jpg\u0027 });\r\n                res.write(data);\r\n                return res.end();\r\n            });\r\n            break;\r\n        case \"ico\":\r\n            fs.readFile(url, function (err, data) {\r\n                res.writeHead(200, { \u0027Content-Type\u0027: \u0027image/ico\u0027 });\r\n                res.write(data);\r\n                return res.end();\r\n            });\r\n            break;\r\n        case \"html\":\r\n            fs.readFile(url, function (err, data) {\r\n                res.writeHead(200, { \u0027Content-Type\u0027: \u0027text/html\u0027 });\r\n                res.write(data);\r\n                return res.end();\r\n            });\r\n            break;\r\n        case \"json\":\r\n            fs.readFile(url, function (err, data) {\r\n                res.writeHead(200, { \u0027Content-Type\u0027: \u0027application/json\u0027 });\r\n                res.write(data);\r\n                return res.end();\r\n            });\r\n            break;\r\n        case \"map\":\r\n            fs.readFile(url, function (err, data) {\r\n                res.writeHead(200, { \u0027Content-Type\u0027: \u0027text/plain\u0027 });\r\n                res.write(data);\r\n                return res.end();\r\n            });\r\n            break;\r\n        case \"woff\":\r\n            fs.readFile(url, function (err, data) {\r\n                res.writeHead(200, { \u0027Content-Type\u0027: \u0027font/woff\u0027 });\r\n                res.write(data);\r\n                return res.end();\r\n            });\r\n            break;\r\n    }\r\n}).listen(port);\r\n```","Link":"simple-node-web-server","Created":"5-12-2020","Category":"node"},{"Title":"Sql Connection Snippet","Markdown":"# Sql Connection Snippet\r\n\r\nCode snippets is a feature in Visual Studio to help speed development by providing common used function.\r\n\r\n\u003e Shortcut menu can be displayed by pressing `Ctrl+K` `Ctrl+X` within an open document in Visual Studio.\r\n\r\nBelow is a custom C# snippet for Visual Studio to generate code for a SQL Connection.  \r\nCreate a `FileName.snippet` file and paste content below. \r\nThen move file to `~\\Documents\\Visual Studio NNNN\\Code Snippets\\Visual C#\\My Code Snippets`.\r\n\r\n```xml\r\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e  \r\n\u003cCodeSnippets  xmlns=\"http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet\"\u003e  \r\n    \u003cCodeSnippet Format=\"1.0.0\"\u003e  \r\n        \u003cHeader\u003e  \r\n          \u003cTitle\u003eSQL Connection\u003c/Title\u003e\r\n\t\t\t    \u003cAuthor\u003eJeremy Travis\u003c/Author\u003e  \r\n\t\t\t    \u003cDescription\u003eCode snippet for SQL Connection and Query\u003c/Description\u003e\r\n\t\t\t    \u003cShortcut\u003esqlconn\u003c/Shortcut\u003e\r\n          \u003cSnippetTypes\u003e\r\n            \u003cSnippetType\u003eExpansion\u003c/SnippetType\u003e\r\n            \u003cSnippetType\u003eSurroundsWith\u003c/SnippetType\u003e\r\n          \u003c/SnippetTypes\u003e\r\n        \u003c/Header\u003e  \r\n        \u003cSnippet\u003e\r\n          \u003cDeclarations\u003e\r\n            \u003cLiteral\u003e\r\n              \u003cID\u003eSomeConnectionString\u003c/ID\u003e\r\n              \u003cToolTip\u003eReplace with your SQL connection string\u003c/ToolTip\u003e\r\n              \u003cDefault\u003eSomeConnectionString\u003c/Default\u003e\r\n            \u003c/Literal\u003e\r\n          \u003c/Declarations\u003e\r\n            \u003cCode Language=\"CSharp\" Kind=\"any\" Delimiter=\"%\"\u003e \r\n              \u003c![CDATA[\r\nstring ConStr = System.Configuration.ConfigurationManager.ConnectionStrings[\"%SomeConnectionString%\"].ConnectionString;\r\nusing(System.Data.SqlClient.SqlConnection con = new System.Data.SqlClient.SqlConnection(ConStr))\r\n{\r\n\tcon.Open();\r\n\r\n\tSystem.Text.StringBuilder sQuery = new System.Text.StringBuilder();\r\n\tsQuery.Append(\"SELECT * FROM [table]\");\r\n\r\n\tSystem.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand(sQuery.ToString(), con);\r\n\tusing (System.Data.SqlClient.SqlDataAdapter adp = new System.Data.SqlClient.SqlDataAdapter(cmd))\r\n\t{\r\n\t\tSystem.Data.DataTable dt = new System.Data.DataTable(\"Query\");\r\n\t\tadp.Fill(dt);\r\n\t}\r\n\r\n\tcon.Close();\r\n}\r\n              ]]\u003e  \r\n            \u003c/Code\u003e  \r\n        \u003c/Snippet\u003e  \r\n    \u003c/CodeSnippet\u003e  \r\n\u003c/CodeSnippets\u003e  \r\n```","Link":"sql-connection-snippet","Created":"4-22-2020","Category":"visualstudio"},{"Title":"Conditional Targeting Other Frameworks","Markdown":"# Conditional Targeting other frameworks\r\nBelow are some example how to conditionaling target other frameworks when building in .NET Core\r\n\r\n```xml\r\n\u003cItemGroup Condition=\" \u0027$(TargetFramework)\u0027 == \u0027net461\u0027 OR \u0027$(TargetFramework)\u0027 == \u0027net46\u0027 OR \u0027$(TargetFramework)\u0027 == \u0027net452\u0027 OR \u0027$(TargetFramework)\u0027 == \u0027net451\u0027 OR \u0027$(TargetFramework)\u0027 == \u0027net45\u0027\"\u003e\r\n\u003c!-- // HttpClient for full .NET --\u003e\r\n\u003cReference Include=\"System.Net.Http\" /\u003e\r\n\u003cReference Include=\"System.Web\" /\u003e\r\n\u003c/ItemGroup\u003e\r\n\r\n\u003cItemGroup Condition=\" \u0027$(TargetFramework)\u0027 == \u0027netstandard2.0\u0027 OR \u0027$(TargetFramework)\u0027 == \u0027netcoreapp2.1\u0027 \"\u003e\r\n\u003c!-- // HttpClient for .NET Core --\u003e\r\n\u003c!--\u003cPackageReference Include=\"System.Net.Http\" Version=\"4.3.3\" /\u003e--\u003e\r\n\u003c/ItemGroup\u003e\r\n```","Link":"conditional-targeting-other-frameworks","Created":"3-18-2020","Category":"dotnetcore"},{"Title":"Vue Component Snippet","Markdown":"# Vue Component Snippet\r\n\r\nCode snippets is a feature in Visual Studio to help speed development by providing common used function.\r\n\r\n\u003e Shortcut menu can be displayed by pressing `Ctrl+K` `Ctrl+X` within an open document in Visual Studio.\r\n\r\nBelow is a custom Typescript snippet for Visual Studio to generate code for a Vue component mixin.  \r\nCreate a `FileName.snippet` file and paste content below. \r\nThen move file to `~\\Documents\\Visual Studio NNNN\\Code Snippets\\TypeScript\\My Code Snippets`.\r\n\r\n```xml\r\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e  \r\n\u003cCodeSnippets  xmlns=\"http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet\"\u003e  \r\n    \u003cCodeSnippet Format=\"1.0.0\"\u003e  \r\n        \u003cHeader\u003e  \r\n          \u003cTitle\u003eVue Component\u003c/Title\u003e\r\n\t\t\t    \u003cAuthor\u003eJeremy Travis\u003c/Author\u003e  \r\n\t\t\t    \u003cDescription\u003eCode snippet for Vue Component\u003c/Description\u003e\r\n\t\t\t    \u003cShortcut\u003evuecomp\u003c/Shortcut\u003e\r\n          \u003cSnippetTypes\u003e\r\n            \u003cSnippetType\u003eExpansion\u003c/SnippetType\u003e\r\n            \u003cSnippetType\u003eSurroundsWith\u003c/SnippetType\u003e\r\n          \u003c/SnippetTypes\u003e\r\n        \u003c/Header\u003e  \r\n        \u003cSnippet\u003e\r\n          \u003cDeclarations\u003e\r\n            \u003cLiteral\u003e\r\n              \u003cID\u003ename\u003c/ID\u003e\r\n              \u003cToolTip\u003eComponent Name\u003c/ToolTip\u003e\r\n              \u003cDefault\u003enew-component\u003c/Default\u003e\r\n            \u003c/Literal\u003e\r\n          \u003c/Declarations\u003e\r\n            \u003cCode Language=\"TypeScript\" Kind=\"any\" Delimiter=\"%\"\u003e \r\n              \u003c![CDATA[\r\nimport { ComponentOptions } from \"vue\";\r\n\r\nexport default {\r\n    name: \"%name%\",\r\n    components: { },\r\n    template: `\u003cdiv\u003e\u003c/div\u003e`,\r\n    data() {\r\n        return {}\r\n    },\r\n    props: {\r\n        someProps: {\r\n            type: String,\r\n            required: false,\r\n            default: \"\"\r\n        }\r\n    },\r\n    methods: {\r\n        MyAction(e: KeyboardEvent) {\r\n        }\r\n    }\r\n} as ComponentOptions\u003cany\u003e\r\n              ]]\u003e  \r\n            \u003c/Code\u003e  \r\n        \u003c/Snippet\u003e  \r\n    \u003c/CodeSnippet\u003e  \r\n\u003c/CodeSnippets\u003e    \r\n```","Link":"vue-component-snippet","Created":"4-22-2020","Category":"visualstudio"},{"Title":"Vue Template Snippet","Markdown":"# Vue Template Snippet\r\n\r\nCode snippets is a feature in Visual Studio to help speed development by providing common used function.\r\n\r\n\u003e Shortcut menu can be displayed by pressing `Ctrl+K` `Ctrl+X` within an open document in Visual Studio.\r\n\r\nBelow is a custom Typescript snippet for Visual Studio to generate code for a Vue template.  \r\nCreate a `FileName.snippet` file and paste content below. \r\nThen move file to `~\\Documents\\Visual Studio NNNN\\Code Snippets\\Custom`.\r\n\r\nHad to copy to the Custom folder to work it a `.vue` file type.\r\n\r\n```xml\r\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e  \r\n\u003cCodeSnippets  xmlns=\"http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet\"\u003e  \r\n    \u003cCodeSnippet Format=\"1.0.0\"\u003e  \r\n        \u003cHeader\u003e  \r\n          \u003cTitle\u003eVue Template\u003c/Title\u003e\r\n\t\t\t    \u003cAuthor\u003eJeremy Travis\u003c/Author\u003e  \r\n\t\t\t    \u003cDescription\u003eCode snippet for Vue template\u003c/Description\u003e\r\n\t\t\t    \u003cShortcut\u003evuecomp\u003c/Shortcut\u003e\r\n          \u003cSnippetTypes\u003e\r\n            \u003cSnippetType\u003eExpansion\u003c/SnippetType\u003e\r\n            \u003cSnippetType\u003eSurroundsWith\u003c/SnippetType\u003e\r\n          \u003c/SnippetTypes\u003e\r\n        \u003c/Header\u003e  \r\n        \u003cSnippet\u003e\r\n          \u003cDeclarations\u003e\r\n            \u003cLiteral\u003e\r\n              \u003cID\u003ename\u003c/ID\u003e\r\n              \u003cToolTip\u003eClass Name\u003c/ToolTip\u003e\r\n              \u003cDefault\u003eMyClass\u003c/Default\u003e\r\n            \u003c/Literal\u003e\r\n          \u003c/Declarations\u003e\r\n            \u003cCode Language=\"HTML\" Kind=\"any\" Delimiter=\"%\"\u003e \r\n\u003c![CDATA[\u003ctemplate\u003e\r\n    \u003cdiv\u003e\u003c/div\u003e\r\n\u003c/template\u003e\r\n\r\n\u003cscript lang=\"ts\"\u003e\r\n    import { Component, Vue } from \"vue-property-decorator\";\r\n\r\n    @Component({})\r\n    export default class %name% extends Vue { }\r\n\u003c/script\u003e\r\n\r\n\u003cstyle lang=\"scss\"\u003e\u003c/style\u003e]]\u003e  \r\n            \u003c/Code\u003e  \r\n        \u003c/Snippet\u003e  \r\n    \u003c/CodeSnippet\u003e  \r\n\u003c/CodeSnippets\u003e   \r\n```","Link":"vue-template-snippet","Created":"4-22-2020","Category":"visualstudio"},{"Title":"Welcome Page","Markdown":"# Welcome\r\n\r\n\u003e This is a blockquote\r\n\r\n*Sample Code Snippet*\r\n```js\r\nfunction TEST() {\r\n    console.log(\"Hello World\");\r\n}\r\n```\r\n","Link":"welcome-page","Created":"3-18-2020","Category":"other"}]}