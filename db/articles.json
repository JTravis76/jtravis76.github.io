{"Articles":[{"Title":"Adding Mime Types to IIS Express","Markdown":"# Adding Mime Types to IIS Express\r\n---\r\n\r\nOpen command prompt with administrator privilages.\r\nChange Directory to either;\r\n\r\n`C:\\Program Files\\IIS Express` or `C:\\Program Files (x86)\\IIS Express`\r\n\r\nRun following command to add `JSON` file extension.\r\n\r\n```bat\r\nappcmd set config /section:staticContent /+[fileExtension=\u0027.json\u0027,mimeType=\u0027application/x-javascript\u0027]\r\n```\r\n\r\nAlso, could browse and edit file located here: \r\n\r\n`C:\\Users\\\u003cUSERPROFILE\u003e\\Documents\\IISExpress\\config\\applicationhost.config`\r\n\r\nSearch for `staticContent` and add the following to allow JSON files to be process.\r\n\r\n```xml\r\n\u003cstaticContent\u003e\r\n    ...\r\n    \u003cmimeMap fileExtension=\".json\" mimeType=\"text/x-javascript\" /\u003e\r\n\u003c/staticContent\u003e    \r\n```","Link":"adding-mime-types-to-iis-express","Created":"8/27/2019","Category":"iis"},{"Title":"Ajax Control ToolKit","Markdown":"# Ajax Control ToolKit\r\n\r\n## How to use the Auto-Complete Extender\r\nThe below sample is to demostrate how to setup a auto-complete feature. You may see these in textboxes for searching, etc.\r\n\r\n```vb\r\nProtected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load\r\n    If Not IsPostBack Then\r\n        ...\r\n    End If\r\n\r\n    \u0027below is use with AJAXToolkit to pass a third param to filter the sql results\r\n    txtPickupFacility_AutoCompleteExtender.ContextKey = DropDown1.SelectedValue\r\nEnd Sub\r\n```\r\n\r\n```vb\r\n#Region \"WebMethods\"\r\n    \u0027\u003ccc1:AutoCompleteExtender ID=\"txtPickupFacility_AutoCompleteExtender\" runat=\"server\" CompletionInterval=\"500\"\r\n    \u0027    CompletionSetCount=\"25\" DelimiterCharacters=\"\" Enabled=\"True\" MinimumPrefixLength=\"1\"\r\n    \u0027    ServiceMethod=\"GetPickupFacilityList\" TargetControlID=\"txtPickupFacility\" UseContextKey=\"true\" \u003e\r\n    \u0027\u003c/cc1:AutoCompleteExtender\u003e\r\n\r\n    \u0027THE contextKey is assigned from code-behind.\r\n    \u003cSystem.Web.Services.WebMethod(True)\u003e\r\n    \u003cSystem.Web.Script.Services.ScriptMethod()\u003e\r\n    Public Shared Function GetPickupFacilityList(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As System.String()\r\n        Dim sql As String = \"SELECT PickupFacility FROM Request WHERE UserId = @UserId AND (PickupFacility LIKE @PickupFacility) ORDER BY PickupFacility\"\r\n\r\n\r\n        Dim da As System.Data.SqlClient.SqlDataAdapter = New System.Data.SqlClient.SqlDataAdapter(sql, ConfigurationManager.ConnectionStrings(\"db\").ConnectionString)\r\n        da.SelectCommand.Parameters.Add(\"@UserId\", SqlDbType.Int).Value = CInt(contextKey)\r\n        da.SelectCommand.Parameters.Add(\"@PickupFacility\", SqlDbType.VarChar, 50).Value = prefixText + \"%\"\r\n        Dim dt As DataTable = New DataTable()\r\n        da.Fill(dt)\r\n\r\n        Dim items As String()\r\n        ReDim items(dt.Rows.Count - 1)\r\n\r\n        Dim i As Integer = 0\r\n        For Each dr As DataRow In dt.Rows\r\n            items(i) = dr(0).ToString()\r\n            i = i + 1\r\n        Next\r\n\r\n        Return items\r\n    End Function\r\n#End Region\r\n```","Link":"ajax-control-toolkit","Created":"9/30/2019","Category":"aspdotnet"},{"Title":"Convert Hex string to Char string","Markdown":"# Convert Hex string to Char string\r\n\r\nFrom Javascript:\r\n\r\n```js\r\nvar value = String.fromCharCode(\"0x2265\");\r\n```\r\n\r\nFrom C#:\r\n\r\n```c#\r\nstring value = (char)Int16.Parse(\"0x2265\", System.Globalization.NumberStyles.AllowHexSpecifier) ;\r\n\r\nstring value = (char)Int16.Parse(\"2265\", System.Globalization.NumberStyles.AllowHexSpecifier);\r\n```","Link":"convert-hex-string-to-char-string","Created":"3-18-2020","Category":"other"},{"Title":"FileSystemWatcher","Markdown":"# FileSystemWatcher\r\n---\r\nFileSystemWatcher is a Microsoft [class](https://docs.microsoft.com/en-us/dotnet/api/system.io.filesystemwatcher?view=netframework-4.8). \r\n\r\nNeeded the ability to watch changes for a directory of Typescript files. Below is an example from a console application I was playing with.\r\n\r\n\u003e NOTE: FileSystemWatcher will not fired when both Modfied Date and Last Access date are update together\r\n\r\n```csharp\r\n[System.Security.Permissions.PermissionSet(System.Security.Permissions.SecurityAction.Demand, Name = \"FullTrust\")]\r\nstatic void Main(string[] args)\r\n{\r\n    System.IO.FileSystemWatcher watcher = new System.IO.FileSystemWatcher\r\n    {\r\n        Path = @\"C:\\Directory\\\",\r\n        NotifyFilter = System.IO.NotifyFilters.LastWrite,\r\n        Filter = \"*.txt\",\r\n        IncludeSubdirectories = false\r\n    };\r\n\r\n    watcher.Error += OnError;\r\n    watcher.Changed += new System.IO.FileSystemEventHandler(OnChanged);\r\n    watcher.EnableRaisingEvents = true;\r\n\r\n\r\n    // Wait for the user to quit the program.\r\n    System.Console.WriteLine(\"Press \\\u0027q\\\u0027 to quit the sample.\");\r\n    while (System.Console.Read() != \u0027q\u0027) ;\r\n}\r\n\r\n\r\nprivate static void OnChanged(object source, System.IO.FileSystemEventArgs e)\r\n{\r\n    watcher.EnableRaisingEvents = false;\r\n\r\n    //TODO: Your Code Here ----\u003e\r\n\r\n    watcher.EnableRaisingEvents = true;\r\n}\r\n\r\nstatic void OnError(object sender, System.IO.ErrorEventArgs e)\r\n{\r\n    System.Exception ex = e.GetException();\r\n    System.Console.WriteLine(ex.Message);\r\n    if (ex.InnerException != null)\r\n    {\r\n        System.Console.WriteLine(ex.InnerException);\r\n    }\r\n}\r\n```","Link":"filesystemwatcher","Created":"3-18-2020","Category":"dotnetframework"},{"Title":"JQuery Ajax Snippet","Markdown":"# JQuery Ajax Snippet\r\n\r\nCode snippets is a feature in Visual Studio to help speed development by providing common used function.\r\n\r\n\u003e Shortcut menu can be displayed by pressing `Ctrl+K` `Ctrl+X` within an open document in Visual Studio.\r\n\r\nBelow is a custom Typescript snippet for Visual Studio to generate code for a JQuery Ajax function.  \r\nCreate a `jQueryAjax.snippet` file and paste content below. \r\nThen move file to `~\\Documents\\Visual Studio NNNN\\Code Snippets\\TypeScript\\My Code Snippets`.\r\n\r\n```xml\r\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e  \r\n\u003cCodeSnippets  xmlns=\"http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet\"\u003e  \r\n    \u003cCodeSnippet Format=\"1.0.0\"\u003e  \r\n        \u003cHeader\u003e  \r\n          \u003cTitle\u003ejQuery Ajax\u003c/Title\u003e\r\n\t\t\t    \u003cAuthor\u003eJeremy Travis\u003c/Author\u003e  \r\n\t\t\t    \u003cDescription\u003eCode snippet for jQuery Ajax with basic options\u003c/Description\u003e\r\n\t\t\t    \u003cShortcut\u003eajax\u003c/Shortcut\u003e\r\n          \u003cSnippetTypes\u003e\r\n            \u003cSnippetType\u003eExpansion\u003c/SnippetType\u003e\r\n            \u003cSnippetType\u003eSurroundsWith\u003c/SnippetType\u003e\r\n          \u003c/SnippetTypes\u003e\r\n        \u003c/Header\u003e  \r\n        \u003cSnippet\u003e\r\n          \u003cDeclarations\u003e\r\n            \u003cLiteral\u003e\r\n              \u003cID\u003etype\u003c/ID\u003e\r\n              \u003cToolTip\u003eType\u003c/ToolTip\u003e\r\n              \u003cDefault\u003ePOST\u003c/Default\u003e\r\n            \u003c/Literal\u003e\r\n            \u003cLiteral\u003e\r\n              \u003cID\u003evar\u003c/ID\u003e\r\n              \u003cToolTip\u003eSome model variable\u003c/ToolTip\u003e\r\n              \u003cDefault\u003emyModel\u003c/Default\u003e\r\n            \u003c/Literal\u003e\r\n          \u003c/Declarations\u003e\r\n            \u003cCode Language=\"TypeScript\" Kind=\"any\" Delimiter=\"%\"\u003e \r\n              \u003c![CDATA[\r\n$.ajax({\r\n    url: \u0027@Url.Action(\"ACTION\", \"CONTROLLER\")\u0027,\r\n\ttype: \"%type%\",\r\n\tcache: false,\r\n\tasync: true,\r\n\tdata: { model: %var% },\r\n\t\r\n\t//Optional\r\n\tcontentType: \"application/json; charset=utf-8\", //inform the server what data type you are sending to the server\r\n\tdataType: \"json\", //This specifies the type of data you are expecting from the server. (i.e. not the datatype that you are sending to the server)\r\n\t\t\t\t\r\n\tbeforeSend: function() { },\r\n\tcomplete: function () { },\r\n\tsuccess: function (data) {\r\n\t\tconsole.log(data);\r\n    if (data.success === undefined) {\r\n        DisplayHtmlError(data);\r\n    }\r\n    else if (!data.success) {\r\n        DisplayVaildationSummary(\"div-err\", data.message);\r\n    }\r\n    else \r\n        window.location.reload();\r\n        %selected%\r\n\t},\r\n\terror: function (xhr, ajaxOptions, error) {\r\n      alert(xhr.responseText);\r\n    }\r\n});\r\n              ]]\u003e  \r\n            \u003c/Code\u003e  \r\n        \u003c/Snippet\u003e  \r\n    \u003c/CodeSnippet\u003e  \r\n\u003c/CodeSnippets\u003e  \r\n```","Link":"jquery-ajax-snippet","Created":"4-22-2020","Category":"visualstudio"},{"Title":"JQuery On Snippet","Markdown":"# JQuery On Snippet\r\n\r\nCode snippets is a feature in Visual Studio to help speed development by providing common used function.\r\n\r\n\u003e Shortcut menu can be displayed by pressing `Ctrl+K` `Ctrl+X` within an open document in Visual Studio.\r\n\r\nBelow is a custom Typescript snippet for Visual Studio to generate code for a JQuery OnClick function.  \r\nCreate a `FileName.snippet` file and paste content below. \r\nThen move file to `~\\Documents\\Visual Studio NNNN\\Code Snippets\\TypeScript\\My Code Snippets`.\r\n\r\nPersonally, find it better to bind the click event to the document with a selector to match. This allows events to be trigger from multiple HTML elements.\r\n\r\n```xml\r\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e  \r\n\u003cCodeSnippets  xmlns=\"http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet\"\u003e  \r\n    \u003cCodeSnippet Format=\"1.0.0\"\u003e  \r\n        \u003cHeader\u003e  \r\n          \u003cTitle\u003ejQuery OnClick\u003c/Title\u003e\r\n\t\t\t    \u003cAuthor\u003eJeremy Travis\u003c/Author\u003e  \r\n\t\t\t    \u003cDescription\u003eCode snippet for jQuery OnClick\u003c/Description\u003e\r\n\t\t\t    \u003cShortcut\u003ejqon\u003c/Shortcut\u003e\r\n          \u003cSnippetTypes\u003e\r\n            \u003cSnippetType\u003eExpansion\u003c/SnippetType\u003e\r\n            \u003cSnippetType\u003eSurroundsWith\u003c/SnippetType\u003e\r\n          \u003c/SnippetTypes\u003e\r\n        \u003c/Header\u003e  \r\n        \u003cSnippet\u003e\r\n          \u003cDeclarations\u003e\r\n            \u003cLiteral\u003e\r\n              \u003cID\u003eevent\u003c/ID\u003e\r\n              \u003cToolTip\u003eevent type\u003c/ToolTip\u003e\r\n              \u003cDefault\u003eclick\u003c/Default\u003e\r\n            \u003c/Literal\u003e\r\n            \u003cLiteral\u003e\r\n              \u003cID\u003eselector\u003c/ID\u003e\r\n              \u003cToolTip\u003eJQuery Selector\u003c/ToolTip\u003e\r\n              \u003cDefault\u003e#btn-\u003c/Default\u003e\r\n            \u003c/Literal\u003e\r\n          \u003c/Declarations\u003e\r\n            \u003cCode Language=\"TypeScript\" Kind=\"any\" Delimiter=\"%\"\u003e \r\n              \u003c![CDATA[\r\n$(document).on(\u0027%event%\u0027, \u0027%selector%\u0027, function (e) {\r\n    e.stopImmediatePropagation();\r\n    let id = $(this).attr(\u0027data-id\u0027);\r\n});\r\n              ]]\u003e  \r\n            \u003c/Code\u003e  \r\n        \u003c/Snippet\u003e  \r\n    \u003c/CodeSnippet\u003e  \r\n\u003c/CodeSnippets\u003e  \r\n```","Link":"jquery-on-snippet","Created":"4-22-2020","Category":"visualstudio"},{"Title":"Launch IIS Express via Command Prompt","Markdown":"# Launch IIS Express via Command Prompt\r\n---\r\nOften times I needed to host and test a web site locally. IIS Express installs with Visual Studio, does this very thing.\r\n\r\nSite Ids can be listed by viewing the `applicationhost.config` file.\r\n\r\nOpen command prompt.\r\n```bat\r\n@\"C:\\Program Files (x86)\\IIS Express\\iisexpress.exe\" /systray:true /config:C:\\Users\\\u003cUSERPROFILE\u003e\\Documents\\IISExpress\\config\\applicationhost.config /siteid:1\r\n```","Link":"launch-iis-express-via-command-prompt","Created":"3-18-2020","Category":"iis"},{"Title":"Reset a Forked Git Branch","Markdown":"# Reset a Forked Git branch\r\n---\r\nWhile collaborating with fellow developers on Github, I find myself needing to updated my fork repository to match the original owner\u0027s repository. This is important to maintain clean up-to-date code while adding new features and bug fixes, especially after a pull request has been completed.\r\n\r\n\u003e Will need to have git installed. [link](https://git-scm.com/)\r\n\r\nAll steps are performed on MS Windows:\r\n* Open internet browser to __your__ forked repo; `master` branch\r\n* Copy \"Clone with HTTPS\" web url\r\n* Browse to a *clean* directory to clone your current `master` repository\r\n* Right-click to open context menu\r\n* Left-click `Git Bash here`\r\n* Type in `git clone ` and then paste in url you copied earlier, press Enter key\r\n    * ![image](./img/git-fig1.png)\r\n* Once download completes, open internet browser to the original owner\u0027s repo that was forked.\r\n* Copy \"Clone with HTTPS\" web url. _Must be owner\u0027s repo, not your forked repo._\r\n* Back in Git Bash, type in the following: **Be sure to CD (Change Directory) into the downloaded repo directory**\r\n```bat\r\ncd ProjectRepoName\r\n\r\ngit remote add original https://github.com/\u003cOWNERS-REPO-URL\u003e.git\r\ngit fetch original\r\ngit checkout master\r\ngit reset --hard original/master  \r\ngit push origin master --force \r\n```\r\n\r\nAll done. Personally, I delete that directory create above to avoid confusion while working in my branch. Now merge up changes and submit a pull-request :)","Link":"reset-a-forked-git-branch","Created":"3-18-2020","Category":"git"},{"Title":"Sql Connection Snippet","Markdown":"# Sql Connection Snippet\r\n\r\nCode snippets is a feature in Visual Studio to help speed development by providing common used function.\r\n\r\n\u003e Shortcut menu can be displayed by pressing `Ctrl+K` `Ctrl+X` within an open document in Visual Studio.\r\n\r\nBelow is a custom C# snippet for Visual Studio to generate code for a SQL Connection.  \r\nCreate a `FileName.snippet` file and paste content below. \r\nThen move file to `~\\Documents\\Visual Studio NNNN\\Code Snippets\\Visual C#\\My Code Snippets`.\r\n\r\n```xml\r\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e  \r\n\u003cCodeSnippets  xmlns=\"http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet\"\u003e  \r\n    \u003cCodeSnippet Format=\"1.0.0\"\u003e  \r\n        \u003cHeader\u003e  \r\n          \u003cTitle\u003eSQL Connection\u003c/Title\u003e\r\n\t\t\t    \u003cAuthor\u003eJeremy Travis\u003c/Author\u003e  \r\n\t\t\t    \u003cDescription\u003eCode snippet for SQL Connection and Query\u003c/Description\u003e\r\n\t\t\t    \u003cShortcut\u003esqlconn\u003c/Shortcut\u003e\r\n          \u003cSnippetTypes\u003e\r\n            \u003cSnippetType\u003eExpansion\u003c/SnippetType\u003e\r\n            \u003cSnippetType\u003eSurroundsWith\u003c/SnippetType\u003e\r\n          \u003c/SnippetTypes\u003e\r\n        \u003c/Header\u003e  \r\n        \u003cSnippet\u003e\r\n          \u003cDeclarations\u003e\r\n            \u003cLiteral\u003e\r\n              \u003cID\u003eSomeConnectionString\u003c/ID\u003e\r\n              \u003cToolTip\u003eReplace with your SQL connection string\u003c/ToolTip\u003e\r\n              \u003cDefault\u003eSomeConnectionString\u003c/Default\u003e\r\n            \u003c/Literal\u003e\r\n          \u003c/Declarations\u003e\r\n            \u003cCode Language=\"CSharp\" Kind=\"any\" Delimiter=\"%\"\u003e \r\n              \u003c![CDATA[\r\nstring ConStr = System.Configuration.ConfigurationManager.ConnectionStrings[\"%SomeConnectionString%\"].ConnectionString;\r\nusing(System.Data.SqlClient.SqlConnection con = new System.Data.SqlClient.SqlConnection(ConStr))\r\n{\r\n\tcon.Open();\r\n\r\n\tSystem.Text.StringBuilder sQuery = new System.Text.StringBuilder();\r\n\tsQuery.Append(\"SELECT * FROM [table]\");\r\n\r\n\tSystem.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand(sQuery.ToString(), con);\r\n\tusing (System.Data.SqlClient.SqlDataAdapter adp = new System.Data.SqlClient.SqlDataAdapter(cmd))\r\n\t{\r\n\t\tSystem.Data.DataTable dt = new System.Data.DataTable(\"Query\");\r\n\t\tadp.Fill(dt);\r\n\t}\r\n\r\n\tcon.Close();\r\n}\r\n              ]]\u003e  \r\n            \u003c/Code\u003e  \r\n        \u003c/Snippet\u003e  \r\n    \u003c/CodeSnippet\u003e  \r\n\u003c/CodeSnippets\u003e  \r\n```","Link":"sql-connection-snippet","Created":"4-22-2020","Category":"visualstudio"},{"Title":"Conditional Targeting Other Frameworks","Markdown":"# Conditional Targeting other frameworks\r\nBelow are some example how to conditionaling target other frameworks when building in .NET Core\r\n\r\n```xml\r\n\u003cItemGroup Condition=\" \u0027$(TargetFramework)\u0027 == \u0027net461\u0027 OR \u0027$(TargetFramework)\u0027 == \u0027net46\u0027 OR \u0027$(TargetFramework)\u0027 == \u0027net452\u0027 OR \u0027$(TargetFramework)\u0027 == \u0027net451\u0027 OR \u0027$(TargetFramework)\u0027 == \u0027net45\u0027\"\u003e\r\n\u003c!-- // HttpClient for full .NET --\u003e\r\n\u003cReference Include=\"System.Net.Http\" /\u003e\r\n\u003cReference Include=\"System.Web\" /\u003e\r\n\u003c/ItemGroup\u003e\r\n\r\n\u003cItemGroup Condition=\" \u0027$(TargetFramework)\u0027 == \u0027netstandard2.0\u0027 OR \u0027$(TargetFramework)\u0027 == \u0027netcoreapp2.1\u0027 \"\u003e\r\n\u003c!-- // HttpClient for .NET Core --\u003e\r\n\u003c!--\u003cPackageReference Include=\"System.Net.Http\" Version=\"4.3.3\" /\u003e--\u003e\r\n\u003c/ItemGroup\u003e\r\n```","Link":"conditional-targeting-other-frameworks","Created":"3-18-2020","Category":"dotnetcore"},{"Title":"Vue Component Snippet","Markdown":"# Vue Component Snippet\r\n\r\nCode snippets is a feature in Visual Studio to help speed development by providing common used function.\r\n\r\n\u003e Shortcut menu can be displayed by pressing `Ctrl+K` `Ctrl+X` within an open document in Visual Studio.\r\n\r\nBelow is a custom Typescript snippet for Visual Studio to generate code for a Vue component mixin.  \r\nCreate a `FileName.snippet` file and paste content below. \r\nThen move file to `~\\Documents\\Visual Studio NNNN\\Code Snippets\\TypeScript\\My Code Snippets`.\r\n\r\n```xml\r\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e  \r\n\u003cCodeSnippets  xmlns=\"http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet\"\u003e  \r\n    \u003cCodeSnippet Format=\"1.0.0\"\u003e  \r\n        \u003cHeader\u003e  \r\n          \u003cTitle\u003eVue Component\u003c/Title\u003e\r\n\t\t\t    \u003cAuthor\u003eJeremy Travis\u003c/Author\u003e  \r\n\t\t\t    \u003cDescription\u003eCode snippet for Vue Component\u003c/Description\u003e\r\n\t\t\t    \u003cShortcut\u003evuecomp\u003c/Shortcut\u003e\r\n          \u003cSnippetTypes\u003e\r\n            \u003cSnippetType\u003eExpansion\u003c/SnippetType\u003e\r\n            \u003cSnippetType\u003eSurroundsWith\u003c/SnippetType\u003e\r\n          \u003c/SnippetTypes\u003e\r\n        \u003c/Header\u003e  \r\n        \u003cSnippet\u003e\r\n          \u003cDeclarations\u003e\r\n            \u003cLiteral\u003e\r\n              \u003cID\u003ename\u003c/ID\u003e\r\n              \u003cToolTip\u003eComponent Name\u003c/ToolTip\u003e\r\n              \u003cDefault\u003enew-component\u003c/Default\u003e\r\n            \u003c/Literal\u003e\r\n          \u003c/Declarations\u003e\r\n            \u003cCode Language=\"TypeScript\" Kind=\"any\" Delimiter=\"%\"\u003e \r\n              \u003c![CDATA[\r\nimport { ComponentOptions } from \"vue\";\r\n\r\nexport default {\r\n    name: \"%name%\",\r\n    components: { },\r\n    template: `\u003cdiv\u003e\u003c/div\u003e`,\r\n    data() {\r\n        return {}\r\n    },\r\n    props: {\r\n        someProps: {\r\n            type: String,\r\n            required: false,\r\n            default: \"\"\r\n        }\r\n    },\r\n    methods: {\r\n        MyAction(e: KeyboardEvent) {\r\n        }\r\n    }\r\n} as ComponentOptions\u003cany\u003e\r\n              ]]\u003e  \r\n            \u003c/Code\u003e  \r\n        \u003c/Snippet\u003e  \r\n    \u003c/CodeSnippet\u003e  \r\n\u003c/CodeSnippets\u003e    \r\n```","Link":"vue-component-snippet","Created":"4-22-2020","Category":"visualstudio"},{"Title":"Vue Template Snippet","Markdown":"# Vue Template Snippet\r\n\r\nCode snippets is a feature in Visual Studio to help speed development by providing common used function.\r\n\r\n\u003e Shortcut menu can be displayed by pressing `Ctrl+K` `Ctrl+X` within an open document in Visual Studio.\r\n\r\nBelow is a custom Typescript snippet for Visual Studio to generate code for a Vue template.  \r\nCreate a `FileName.snippet` file and paste content below. \r\nThen move file to `~\\Documents\\Visual Studio NNNN\\Code Snippets\\Custom`.\r\n\r\nHad to copy to the Custom folder to work it a `.vue` file type.\r\n\r\n```xml\r\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e  \r\n\u003cCodeSnippets  xmlns=\"http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet\"\u003e  \r\n    \u003cCodeSnippet Format=\"1.0.0\"\u003e  \r\n        \u003cHeader\u003e  \r\n          \u003cTitle\u003eVue Template\u003c/Title\u003e\r\n\t\t\t    \u003cAuthor\u003eJeremy Travis\u003c/Author\u003e  \r\n\t\t\t    \u003cDescription\u003eCode snippet for Vue template\u003c/Description\u003e\r\n\t\t\t    \u003cShortcut\u003evuecomp\u003c/Shortcut\u003e\r\n          \u003cSnippetTypes\u003e\r\n            \u003cSnippetType\u003eExpansion\u003c/SnippetType\u003e\r\n            \u003cSnippetType\u003eSurroundsWith\u003c/SnippetType\u003e\r\n          \u003c/SnippetTypes\u003e\r\n        \u003c/Header\u003e  \r\n        \u003cSnippet\u003e\r\n          \u003cDeclarations\u003e\r\n            \u003cLiteral\u003e\r\n              \u003cID\u003ename\u003c/ID\u003e\r\n              \u003cToolTip\u003eClass Name\u003c/ToolTip\u003e\r\n              \u003cDefault\u003eMyClass\u003c/Default\u003e\r\n            \u003c/Literal\u003e\r\n          \u003c/Declarations\u003e\r\n            \u003cCode Language=\"HTML\" Kind=\"any\" Delimiter=\"%\"\u003e \r\n\u003c![CDATA[\u003ctemplate\u003e\r\n    \u003cdiv\u003e\u003c/div\u003e\r\n\u003c/template\u003e\r\n\r\n\u003cscript lang=\"ts\"\u003e\r\n    import { Component, Vue } from \"vue-property-decorator\";\r\n\r\n    @Component({})\r\n    export default class %name% extends Vue { }\r\n\u003c/script\u003e\r\n\r\n\u003cstyle lang=\"scss\"\u003e\u003c/style\u003e]]\u003e  \r\n            \u003c/Code\u003e  \r\n        \u003c/Snippet\u003e  \r\n    \u003c/CodeSnippet\u003e  \r\n\u003c/CodeSnippets\u003e   \r\n```","Link":"vue-template-snippet","Created":"4-22-2020","Category":"visualstudio"},{"Title":"Welcome Page","Markdown":"# Welcome\r\n\r\n\u003e This is a blockquote\r\n\r\n*Sample Code Snippet*\r\n```js\r\nfunction TEST() {\r\n    console.log(\"Hello World\");\r\n}\r\n```\r\n","Link":"welcome-page","Created":"3-18-2020","Category":"other"}]}