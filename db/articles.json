{"Articles":[{"Title":"Adding Mime Types to IIS Express","Markdown":"# Adding Mime Types to IIS Express\r\n\r\nOpen command prompt with administrator privilages.\r\nChange Directory to either;\r\n\r\n`C:\\Program Files\\IIS Express` or `C:\\Program Files (x86)\\IIS Express`\r\n\r\nRun following command to add `JSON` file extension.\r\n\r\n```bat\r\nappcmd set config /section:staticContent /+[fileExtension=\u0027.json\u0027,mimeType=\u0027application/x-javascript\u0027]\r\n```\r\n\r\nAlso, could browse and edit file located here: \r\n\r\n`C:\\Users\\\u003cUSERPROFILE\u003e\\Documents\\IISExpress\\config\\applicationhost.config`\r\n\r\nSearch for `staticContent` and add the following to allow JSON files to be process.\r\n\r\n```xml\r\n\u003cstaticContent\u003e\r\n    ...\r\n    \u003cmimeMap fileExtension=\".json\" mimeType=\"text/x-javascript\" /\u003e\r\n\u003c/staticContent\u003e    \r\n```","Link":"adding-mime-types-to-iis-express","Created":"8/27/2019","Category":"iis"},{"Title":"Ajax Control ToolKit","Markdown":"# Ajax Control ToolKit\r\n\r\n## How to use the Auto-Complete Extender\r\nThe below sample is to demostrate how to setup a auto-complete feature. You may see these in textboxes for searching, etc.\r\n\r\n```vb\r\nProtected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load\r\n    If Not IsPostBack Then\r\n        ...\r\n    End If\r\n\r\n    \u0027below is use with AJAXToolkit to pass a third param to filter the sql results\r\n    txtPickupFacility_AutoCompleteExtender.ContextKey = DropDown1.SelectedValue\r\nEnd Sub\r\n```\r\n\r\n```vb\r\n#Region \"WebMethods\"\r\n    \u0027\u003ccc1:AutoCompleteExtender ID=\"txtPickupFacility_AutoCompleteExtender\" runat=\"server\" CompletionInterval=\"500\"\r\n    \u0027    CompletionSetCount=\"25\" DelimiterCharacters=\"\" Enabled=\"True\" MinimumPrefixLength=\"1\"\r\n    \u0027    ServiceMethod=\"GetPickupFacilityList\" TargetControlID=\"txtPickupFacility\" UseContextKey=\"true\" \u003e\r\n    \u0027\u003c/cc1:AutoCompleteExtender\u003e\r\n\r\n    \u0027THE contextKey is assigned from code-behind.\r\n    \u003cSystem.Web.Services.WebMethod(True)\u003e\r\n    \u003cSystem.Web.Script.Services.ScriptMethod()\u003e\r\n    Public Shared Function GetPickupFacilityList(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As System.String()\r\n        Dim sql As String = \"SELECT PickupFacility FROM Request WHERE UserId = @UserId AND (PickupFacility LIKE @PickupFacility) ORDER BY PickupFacility\"\r\n\r\n\r\n        Dim da As System.Data.SqlClient.SqlDataAdapter = New System.Data.SqlClient.SqlDataAdapter(sql, ConfigurationManager.ConnectionStrings(\"db\").ConnectionString)\r\n        da.SelectCommand.Parameters.Add(\"@UserId\", SqlDbType.Int).Value = CInt(contextKey)\r\n        da.SelectCommand.Parameters.Add(\"@PickupFacility\", SqlDbType.VarChar, 50).Value = prefixText + \"%\"\r\n        Dim dt As DataTable = New DataTable()\r\n        da.Fill(dt)\r\n\r\n        Dim items As String()\r\n        ReDim items(dt.Rows.Count - 1)\r\n\r\n        Dim i As Integer = 0\r\n        For Each dr As DataRow In dt.Rows\r\n            items(i) = dr(0).ToString()\r\n            i = i + 1\r\n        Next\r\n\r\n        Return items\r\n    End Function\r\n#End Region\r\n```","Link":"ajax-control-toolkit","Created":"9/30/2019","Category":"aspdotnet"},{"Title":"Azure Devops CI CD","Markdown":"# Azure Devops CI/CD\r\n\r\n## Agents: Build | Release\r\n\r\nAgents can be use for both Build or Release defintions.\r\n\r\n* Build Definition\r\n  * setup tasks required for build\r\n  * setup triggers for auto building upon commits\r\n* Release Definition\r\n  * Setup rules for Artifacts and Enviroments\r\n  * Auto | Manual deployment with tags\r\n\r\n[Predefined Agent Variables](https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops\u0026tabs=yaml)\\\r\n[Self-hosted Windows Agents](https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/v2-windows?view=azure-devops)\r\n___\r\n## Installing Agents\r\n\r\nBelow sample script will install an agent named `PA13078-A1` in Agent Pool `PA13078` ans run as a service.\r\n```ps\r\n.\\config.cmd --pool \"PA13078\" --agent \"PA13078-A1\" --runasservice --work \u0027_work\u0027 --url \u0027http://ddptfs01:8080/tfs/\u0027 --auth Integrated\r\n```\r\n\r\nDeployment Groups\\\r\n_(Deployment Pools =\u003e Deployment Group =\u003e Project)_\r\n\r\n\u003e NOTE: Deployment Groups are for parallel installs for multi-servers. IIS Deployment tasks can ONLY be ran local to the IIS server. Cannot be push to remote IIS web servers.\r\n\r\n```ps\r\n.\\config.cmd --deploymentgroup --deploymentgroupname \"Deployment Pool 1\" --agent $env:COMPUTERNAME --runasservice --work \u0027_work\u0027 --url \u0027http://ddptfs01:8080/tfs/\u0027 --collectionname \u0027DefaultCollection\u0027 --projectname \u0027Toolbox\u0027 --auth Integrated;\r\n```\r\n\r\n### `_WORK` Directory:\r\n\r\nThe `_work` directory consist many folders to divide the work.\r\n\r\n* `_tasks` - downloaded tasks to be perform by agent based on pipline\r\n* `_tool` - a cache copy of Nuget and/or Node\r\n* `1` - first **build** project executed by agent\r\n  * `a` - publish artifacts folder\r\n  * `s` - project source from TFS\r\n* `r1` - first **release** project executed by agent\r\n  * `a` - downloaded artifacts folder\r\n\r\n### `_TOOL` Directory\r\nThe `_tool` directory consist of tools to assist in many building tasks, such as; nuget package restore, node/npm commands, etc;\r\n\r\nDepending on your corporate firewall policy, may need to add tools to the agent directory manually. Below are example for Nuget and NodeJs.\r\n\r\n\u003e**NOTE:** x64.complete is a empty file with the extension `.complete`\r\n\r\n```\r\n+ _tools\r\n\r\n+-- Nuget\r\n+---- 5.3.0\r\n+------ x64\r\n+-------- nuget.exe\r\n+------ x64.complete\r\n\r\n+-- Node\r\n+---- 12.13.1\r\n+------ x64\r\n+-------- node_modules\r\n+-------- node.exe\r\n+-------- npm\r\n+-------- npm.cmd\r\n+------ x64.complete\r\n```\r\n\r\nTo set a Enviroment path temporary, use the following Powershell.\r\n\r\n```powershell\r\nClear-Host\r\n# note the leading comma\r\n$env:Path += \";$(Agent.ToolsDirectory)\\Sass\\1.15.3\\x64\";\r\n\r\n#optional way, this will not append\r\n[System.Environment]::SetEnvironmentVariable(\"Path\", \"$(Agent.ToolsDirectory)\\_tool\\Sass\\1.15.3\\x64\", [System.EnvironmentVariableTarget]::Process);\r\n```\r\n___\r\n## Nuget\r\n\r\nIf a build requires restoring Nuget packages, must include `Nuget.config` in your project with the following package feeds.\r\n\r\n\u003e**Note:** `Nuget.config` is better place at root of repo to be shared across all branches. \r\n_This would resulting in downloading the root repo and cloaking other branches._ May also result in cloaking newly added branches \r\n\r\n```xml\r\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\r\n\u003cconfiguration\u003e\r\n  \u003csolution\u003e\r\n    \u003cadd key=\"disableSourceControlIntegration\" value=\"true\" /\u003e\r\n  \u003c/solution\u003e\r\n  \u003cconfig\u003e\r\n    \u003cadd key=\"repositoryPath\" value=\".\\packages\" /\u003e\r\n  \u003c/config\u003e\r\n  \u003cpackageSources\u003e\r\n    \u003cadd key=\"nuget.org\" value=\"https://www.nuget.org/api/v2/\" /\u003e\r\n    \u003cadd key=\"PORTS.Nuget\" value=\"http://devapps2/Ports.Nuget/nuget/\" /\u003e\r\n  \u003c/packageSources\u003e\r\n\u003c/configuration\u003e\r\n```\r\n\r\n### Nuget Restore vs. Dotnet Restore\r\nBoth restore works a bit differently. Nuget restore can restore packages for both Framework and Core projects, but Framework requires there is a `packages` directory within the solution for successful builds.\r\n\r\nDotnet restore is a wrapper around nuget.exe, but Core application reference packages from the `.nuget` folder of the user\u0027s profile. Therefore, does nnot need to be copied to solution prior to building. This action mainly updates the cache directory.\r\n\r\nAzure DevOps (on-premise) server needs access to download Nuget.exe and Packages.\r\n* https://dist.nuget.org/win-x86-commandline/v5.3.0/nuget.exe\r\n* https://www.nuget.org/api/v2 \r\n\r\n\u003e When working off-line or disconnected from internet, MUST use a cache directory. _This directory can be quite large, several GB+_\r\n\r\nNuget.exe cache directory for agents.\r\n```\r\n- _work\r\n-- _tool\r\n--- NuGet\r\n---- 5.3.0\r\n----- x64.complete (empty file)\r\n----- x64\r\n------ nuget.exe\r\n```\r\n\r\n\u003e If desire a certain Nuget.exe version used by Visual Studio. Click Help-\u003e About Microsoft Visual Studio  scroll to `Nuget Package Manager`\r\n\r\n**Nuget Package Cache**\r\n\r\nPre-downloaded packages can be placed in the following user\u0027s directory running the agent service.\r\n\r\n```\r\nC:\\Users\\\u003cUSER\u003e\\.nuget\\packages\r\n```\r\n\r\n___\r\n## NPM Powershell Tasks\r\n\r\nWhen using a service account to run NPM related tasks, need to update the `.npmrc` file located here: C:\\Users\\\u003cNAME\u003e\\.npmrc\r\n\r\n\u003e NOTE: when using an on premise NPM server, you may scope the registry for additional downloads.\r\n\r\n*.npmrc*\r\n```\r\n@ports:registry=http://devapps2:8080/\r\nregistry=https://registry.npmjs.org/\r\nstrict-ssl=false\r\n```\r\n\r\nBelow task will create a NPM shrinkwrap file due to security risk with tar@2.0.0.\r\nInstall packages and finally execute NPM scripts\r\n\r\n\u003e NOTE: the `npm ci` command. This will restore packages from the package-lock.json\r\n```ps\r\nNew-Item -Path . -Name \"npm-shrinkwrap.json\" -ItemType \"file\" -Value \u0027{\"lockfileVersion\": 1,\"dependencies\": {\"tar\": {\"version\": \"2.0.0\",\"from\": \"tar@^2.0.0\",\"dependencies\": {\"connect\": {\"version\": \"3.0.0\",\"from\": \"tar@^2.0.0\"}}}}}\u0027;\r\nnpm install node-sass@4.13.0 rollup@1.27.8\r\nnpm ci\r\nnpm run tsc\r\nnpm run build\r\n```\r\n\r\nMay need to remove the VUEX type definition when using strongly-typed store.\r\n\r\n```ps\r\n# remove VUEX type definition\r\n$path = \"$(Build.SourcesDirectory)\\node_modules\\vuex\\types\\vue.d.ts\"\r\n\r\nif (Test-Path -Path $path -PathType Leaf) \r\n{\r\n    Remove-Item -Path $path -Force\r\n}\r\n```\r\n\r\nUpdate assembly information with Build and Revision (ChangeSet) numbers.\r\n```ps\r\n$path = \"$(Build.SourcesDirectory)\\$(Build.DefinitionName)\\Source\\WISE.Api\\Properties\\AssemblyInfo.cs\"\r\n$a = Get-Content -Raw -Path $path\r\n\r\nif ($a -match \u0027\\d+.\\d+.\\d+.\\d+\u0027)\r\n{\r\n    $b = $Matches[0].Split(\u0027.\u0027)\r\n\r\n    if ($b.Count -gt 0)\r\n    {\r\n        $z = \"\"\r\n        # Get ONLY the Major and Minor Version\r\n        for ($c = 0; $c -lt $b.Length - 2; $c++)\r\n        {\r\n            $z += ($b.Item($c) + \".\")\r\n        }\r\n\r\n        # Add Build and Revision (ChangeSet)\r\n        $z += (\"$(Build.BuildNumber)\" + \".\" + \"$(Build.SourceVersion)\")\r\n\r\n        $a = $a.Replace($Matches[0], $z)\r\n    }\r\n}\r\nelse\r\n{\r\n    # Writes an error to build summary and log it in red text\r\n    Write-Host  \"##vso[task.LogIssue type=error;]Fail to update version\"\r\n    exit 1\r\n}\r\n\r\nSet-Content -Path $path -Value $a -Force -Encoding UTF8\r\n```\r\n\r\nUpdate Vue JS configuration information with Build and Revision (ChangeSet) numbers.\r\n```ps\r\n$path = \"$(Build.SourcesDirectory)\\src\\store\\modules\\configuration.ts\"\r\n$a = Get-Content -Raw -Path $path\r\n\r\n# Update Base URL with port pattern\r\n$a = $a -replace \u0027http://localhost:\\d+/\u0027, $Env:BaseApi\r\n\r\n# Update Enviroment\r\n$a = $a.Replace(\u0027LOCAL\u0027, $Env:Enviroment)\r\n\r\n# Update Netcenter API\r\n$a = $a.Replace(\u0027http://netcenterapidev/\u0027, $Env:NetcenterApi)\r\n\r\n# Update Version with Build \u0026 Revision (ChangeSet) number\r\nif ($a -match \u0027\\d+.\\d+.\\d+.\\d+\u0027)\r\n{\r\n    $b = $Matches[0].Split(\u0027.\u0027)\r\n\r\n    if ($b.Count -gt 0) \r\n    {\r\n        $z = \"\"\r\n        # Only fetch the Major and Minor version\r\n        for ($d = 0; $d -lt ($b.Length - 2); $d++)\r\n        {\r\n            $z += ($b.item($d) + \".\")\r\n        }\r\n        $z += (\"$(Build.BuildNumber)\" + \u0027.\u0027 + \"$(Build.SourceVersion)\")\r\n\r\n        $a = $a.Replace($Matches[0], $z)\r\n    }\r\n}\r\nelse\r\n{\r\n    # Writes an error to build summary and to log in red text\r\n    Write-Host  \"##vso[task.LogIssue type=error;]Fail to update version\"\r\n    exit 1\r\n}\r\n\r\nSet-Content -Path $path -Value $a -Force -Encoding UTF8\r\n```\r\n\r\nWhen publishing a front-end web application in the public folder.\r\n\u003e This script is use BEFORE any MSBUILD task to pack a website with a `*.publishproj`\r\n\r\n```ps\r\nClear-Host\r\n$name = \"*.publishproj\"\r\n$path = (\"$(Build.SourcesDirectory)\\\" + $name)\r\n$dest = (\"$(Build.SourcesDirectory)\\public\\\")\r\n\r\nMove-Item -Path $path -Destination $dest -Force\r\n\r\n# Clean publish folder\r\nif (Test-Path -Path \"$(Build.SourcesDirectory)\\App_Data\\publish\" -PathType Container)\r\n{\r\n    Remove-Item -Path \"$(Build.SourcesDirectory)\\App_Data\\publish\" -Recurse\r\n}\r\n```\r\n\r\nSetup a temporary enviroment path to a tool.\r\n\r\n```ps\r\nClear-Host\r\n# NOTE the leading comma\r\n$env:Path += \";$(Agent.ToolsDirectory)\\Sass\\1.15.3\\x64\";\r\n\r\n# now able to run the command\r\nsass \"\\wwwroot\\scss\\index.scss\" \"\\wwwroot\\css\\site.css\" --no-source-map\r\n```\r\n\r\nSetup vue to use minified version for QA/Prod depolyments:\r\n\r\n\u003e NOTE: this currently for requiredjs config\r\n\r\n```ps\r\nClear-Host\r\n\r\n$path = \"$(Build.SourcesDirectory)\\index.html\"\r\n$a = Get-Content -Raw -Path $path\r\n\r\n\u003c# Look for vue in a requirejs.config() object \r\n    and set to use minified version\r\n#\u003e\r\nif ($a -match \u0027(\"vue\": \"vue\",)\u0027)\r\n{\r\n    $a = $a -replace \u0027\"vue\": \"vue\",\u0027, \u0027\"vue\": \"vue.min\",\u0027\r\n    $a = $a -replace \u0027urlArgs:\u0027, \u0027//urlArgs:\u0027\r\n}\r\nelse\r\n{\r\n    # Writes to build summary\r\n    Write-Host  \"##vso[task.LogIssue type=warning;]Fail to set requirejs config.\"\r\n    #exit 1\r\n}\r\n\r\nSet-Content -Path $path -Value $a -Force -Encoding UTF8\r\n```\r\n___\r\n## MSBUILD\r\nMSBuild is use to compile project codes into assemblies.\r\n\r\nHere are some basic properties switches:\r\n```\r\n/p:DeployOnBuild=true \r\n/p:WebPublishMethod=Package | FileSystem\r\n/p:PackageAsSingleFile=true \r\n/p:SkipInvalidConfigurations=true \r\n/p:PackageLocation=\"$(build.artifactstagingdirectory)\\\\\"\r\n/p:PublishUrl=\"$(build.artifactstagingdirectory)\\\\\"\r\n/p:OutputPath=\"$(build.artifactstagingdirectory)\\\\\"\r\n/p:DeleteExistingFiles=True\r\n\r\n/p:LastUsedBuildConfiguration=\"Release\" \r\n/p:LastUsedPlatform=\"Any CPU\"\r\n\r\n# SLN files\r\n/p:Configuration=Release /p:Platform=\"Any CPU\"\r\n\r\n# Use a Publishing profile\r\n/p:PublishProfile=\"**\\App_Data\\PublishProfiles\\Website.pubxml\"\r\n```\r\n\r\n### Build specific targets in solutions by using MSBuild.exe\r\n[MS weblink](https://docs.microsoft.com/en-us/visualstudio/msbuild/how-to-build-specific-targets-in-solutions-by-using-msbuild-exe?view=vs-2019)\r\n\r\n\u003e Specify the target after the -target: switch in the format \u003cProjectName\u003e:\u003cTargetName\u003e. If the project name contains any of the characters %, $, @, ;, ., (, ), or \u0027, replace them with an _ in the specified target name.\r\n\r\n```\r\nmsbuild.exe \u003cSolutionName\u003e.sln -target:Database\\Toolbox_DB:Rebuild;Database\\Toolbox_DB:Clean\r\n```\r\n\r\n___\r\n## DotNet Core\r\n\r\nAssembly version is stored in the *.csproj file.\r\n\r\n\u003e NOTE: if project version is default `1.0.0`, it is ignored from this file.\r\n\r\nTo meet the requirements for proper versioning, add the additional Revision.\r\n\r\n```xml\r\n  \u003cPropertyGroup\u003e\r\n    \u003cTargetFramework\u003enetcoreapp2.1\u003c/TargetFramework\u003e\r\n    \u003cVersion\u003e1.0.0.0\u003c/Version\u003e\r\n  \u003c/PropertyGroup\u003e\r\n```\r\n\r\nWhen using MSBUILD to publish, must first run `dotnet restore` before running `msbuild /m `\r\n\r\n\u003eNote: when working with mutiple SDK of Net Core, place a `global.json` file at root of branch.\r\n\r\n```json\r\n{\r\n  \"sdk\": {\r\n    \"version\": \"2.1.510\"\r\n  }\r\n}\r\n```\r\n\r\n### Known Issues\r\nBuild was failing when executed from another drive (E:) instead of (C:) where the SDK installed.\r\n\r\nCould be related to a fallback path not reachable.\r\n```xml\r\n\u003cItemGroup\u003e\r\n    \u003cReference Include=\"Microsoft.AspNetCore.Http.Features\"\u003e\r\n        \u003cHintPath\u003e..\\..\\..\\..\\..\\..\\..\\..\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http.features\\2.1.1\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.Features.dll\u003c/HintPath\u003e\r\n    \u003c/Reference\u003e\r\n\u003c/ItemGroup\u003e\r\n```\r\n\r\n[Solution] Replacing with a Nuget package.\r\n```xml\r\n\u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"Microsoft.AspNetCore.Http.Features\" Version=\"2.1.1\" /\u003e\r\n\u003c/ItemGroup\u003e\r\n```  \r\n\r\n```\r\nBuild FAILED.\r\n\r\n    \"E:\\agents\\A2\\_work\\5\\s\\UMAS-DEV-CI\\Development\\Source\\UMAS.sln\" (UMAS_Api target) (1) -\u003e\r\n    \"E:\\agents\\A2\\_work\\5\\s\\UMAS-DEV-CI\\Development\\Source\\UMAS.Api\\UMAS.Api.csproj\" (default target) (2) -\u003e\r\n    \"E:\\agents\\A2\\_work\\5\\s\\UMAS-DEV-CI\\Development\\Source\\UMAS.Infrastructure\\UMAS.Infrastructure.csproj\" (default\r\n    target) (4:2) -\u003e\r\n    (ResolveAssemblyReferences target) -\u003e\r\n        C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\Bin\\Microsoft.Common.CurrentVers\r\n    ion.targets(2110,5): warning MSB3245: Could not resolve this reference. Could not locate the assembly \"Microsoft\r\n    .AspNetCore.Http.Features\". Check to make sure the assembly exists on disk. If this reference is required by you\r\n    r code, you may get compilation errors. [E:\\agents\\A2\\_work\\5\\s\\UMAS-DEV-CI\\Development\\Source\\UMAS.Infrastructu\r\n    re\\UMAS.Infrastructure.csproj]\r\n\r\n\r\n    \"E:\\agents\\A2\\_work\\5\\s\\UMAS-DEV-CI\\Development\\Source\\UMAS.sln\" (UMAS_Api target) (1) -\u003e\r\n    \"E:\\agents\\A2\\_work\\5\\s\\UMAS-DEV-CI\\Development\\Source\\UMAS.Api\\UMAS.Api.csproj\" (default target) (2) -\u003e\r\n    \"E:\\agents\\A2\\_work\\5\\s\\UMAS-DEV-CI\\Development\\Source\\UMAS.Infrastructure\\UMAS.Infrastructure.csproj\" (default\r\n    target) (4:2) -\u003e\r\n    (CoreCompile target) -\u003e\r\n        Interfaces\\IMedia.cs(28,36): error CS0234: The type or namespace name \u0027AspNetCore\u0027 does not exist in the names\r\n    pace \u0027Microsoft\u0027 (are you missing an assembly reference?) [E:\\agents\\A2\\_work\\5\\s\\UMAS-DEV-CI\\Development\\Source\r\n    \\UMAS.Infrastructure\\UMAS.Infrastructure.csproj]\r\n        Services\\Documentum\\DocumentumSvc.cs(261,43): error CS0234: The type or namespace name \u0027AspNetCore\u0027 does not e\r\n    xist in the namespace \u0027Microsoft\u0027 (are you missing an assembly reference?) [E:\\agents\\A2\\_work\\5\\s\\UMAS-DEV-CI\\D\r\n    evelopment\\Source\\UMAS.Infrastructure\\UMAS.Infrastructure.csproj]\r\n```\r\n\r\n## Appcmd.exe\r\n---\r\n\r\nAppcmd.exe is located at this directory; `C:\\Windows\\System32\\inetsrv`\r\n\r\nTo set windows authentication\r\n\r\n```cmd\r\nappcmd.exe set config \"Default Web Site/SiteName\" /section:windowsAuthentication /enabled:true /commit:apphost\r\n```\r\n\r\nTo set binding on a Site\r\n\r\n\u003e NOTE: may also use DNS CNAME\r\n\r\n```cmd\r\nappcmd.exe set site \"SiteName\" /bindings:http/*:80:yourcustomdomain.com\r\n```\r\n\r\n___\r\n## Deploying DACPAC with SqlPackage.exe\r\n\r\n\u003e Be sure to have the latest release build of DACPAC before beginning.\r\n\r\n```\r\nmsbuild \"C:\\Users\\\u003c%USERPROFILE%\u003e\\source\\Workspaces\\WasteContainer\\Development\\Source\\WasteContainer.sln\" -target:Database\\WasteContainer_DB /p:Configuration=Release /p:Platform=\"Any CPU\"\r\n```\r\n\r\nOnce installed on the computer/SQL server, located here: \"C:\\Program Files\\Microsoft SQL Server\\150\\DAC\\bin\\SqlPackage.exe\".\r\nWas able to test against the (localdb)\\MSSQLLocalDB version.\r\nWhen passing a profile XML as one of the command switches, the following results were noted:\r\n\r\n_Test results from Azure Devops CD_\r\n* publish.xml -\u003e TargetConnectionString with `Integrated Security=True;` passed successfully but could **not** located the database nor table on SQL server.\r\n* publish.xml -\u003e TargetConnectionString with `User ID=sa;Password=****;` failed with error that \"Login failed for user \u0027sa\u0027\"\r\n\r\nHowever, running the command locally on the computer/SQL Server worked both ways.\r\n\r\n\u003e NOTE. Before running the below command, could generate the insert scripts prior to publishing.  \r\nThis was performed in DEV to restore the existing data after the DACPAC updates were applied.\r\n\r\nFull example of command:\r\n```\r\n\"C:\\Program Files\\Microsoft SQL Server\\150\\DAC\\bin\\SqlPackage.exe\" /action:publish /sourcefile:\"E:\\Toolbox.DB.dacpac\" /profile:\"E:\\Toolbox.DB.publish.xml\"\r\n```\r\n\r\n**Drawbacks:**\r\n* Agent would need to be installed on each SQL Server.\r\n* Although DACPAC can create new database, may need to pre-setup with desired user id and password to control permissions.\r\n\r\n## Further local testing with DACPAC\r\n\r\nFound that DACPAC with Create, Update, and apply post-scripts. Also provide errors if attempting to change a column\r\nname, apply the same script to insert records on table with constraints\r\n\r\n\r\n# WimRM - Sql DacpacDeploy\r\n\r\nWinRM HTTP port: 5985\r\nWinRM HTTPS port: 5986\r\n\r\n\r\n\r\n\r\nagent.diagnostic = true\r\n\r\n\r\n# Release - Continous Delivery CD\r\n\r\n## Variable Library\r\n\r\n\u003e NOTE: when using a variable library in a Release, the values are copied. In an event of an error, will need to create a new Release once the error has been corrected.\r\n\r\nWhen using service account for release tasks, based on company policies. Could prevent internet firewall proxy from working.\r\n\r\n# Thycotic Secret Server\r\n\r\nThis week I was assigned to modified one of our deployment task within Azure DevOps 2019. We are using the WINRM: IIS App Management task. This task will create/update a website, \r\napp pools, http binding, and set authentication. So this is the perfect candidate to use our Thycotic Secret Server.\r\n\r\nMicrosoft kindly open-source their task extensions on github, found [here](https://github.com/microsoft/azure-pipelines-extensions).  \r\nThe extensions we\u0027ll be using is under `IISWebAppDeploy -\u003e IISWebAppMgmt`.\r\n\r\nFirst, open the `task.json` and make the following changes.\r\n```json\r\n...\r\n\"version\": {\r\n    \"Major\": 3,\r\n    \"Minor\": 1,\r\n    \"Patch\": 0\r\n},\r\n...\r\n\"inputs\": [\r\n    {\r\n    ...\r\n    {\r\n        \"name\": \"WinRMAuthentication\",\r\n        \"type\": \"radio\",\r\n        \"label\": \"Authentication\",\r\n        \"required\": true,\r\n        \"defaultValue\": \"Standard\",\r\n        \"options\": {\r\n            \"Standard\": \"Standard\",\r\n            \"Thycotic\": \"Thycotic\"\r\n        },\r\n        \"helpMarkDown\": \"Select the authentication to use for the WinRM connection with the machine(s). The default is Standard (Username/Password).\"\r\n    },\r\n    {\r\n        \"name\": \"AdminUserName\",\r\n        \"type\": \"string\",\r\n        \"label\": \"Admin Login\",\r\n        \"defaultValue\": \"\",\r\n        \"visibleRule\": \"WinRMAuthentication = Standard\",\r\n        \"required\": true,\r\n        \"helpMarkDown\": \"Provide the administrator\u0027s login of the target machines.\"\r\n    },\r\n    {\r\n        \"name\": \"AdminPassword\",\r\n        \"type\": \"string\",\r\n        \"label\": \"Password\",\r\n        \"defaultValue\": \"\",\r\n        \"visibleRule\": \"WinRMAuthentication = Standard\",\r\n        \"required\": true,\r\n        \"helpMarkDown\": \"Provide the administrator\u0027s password of the target machines. \u003cbr\u003eThe best practice is to create a variable in the Build or Release pipeline, and mark it as \u0027Secret\u0027 to secure it, and then use it here, like \u0027$(adminPassword)\u0027.\"\r\n    },\r\n    {\r\n        \"name\": \"ThycoticServer\",\r\n        \"type\": \"string\",\r\n        \"label\": \"Server URL\",\r\n        \"defaultValue\": \"\",\r\n        \"visibleRule\": \"WinRMAuthentication = Thycotic\",\r\n        \"required\": true,\r\n        \"helpMarkDown\": \"Provide the URL address to Thycotic Secret Server. \u003cbr /\u003eEX: https://thycotic.ports.local/SecretServer/\"\r\n    },\r\n    {\r\n        \"name\": \"ThycoticRule\",\r\n        \"type\": \"string\",\r\n        \"label\": \"Rule Name\",\r\n        \"defaultValue\": \"\",\r\n        \"visibleRule\": \"WinRMAuthentication = Thycotic\",\r\n        \"required\": true,\r\n        \"helpMarkDown\": \"Provide the Thycotic Rule name to use.\"\r\n    },\r\n    {\r\n        \"name\": \"ThycoticKey\",\r\n        \"type\": \"string\",\r\n        \"label\": \"Key\",\r\n        \"defaultValue\": \"\",\r\n        \"visibleRule\": \"WinRMAuthentication = Thycotic\",\r\n        \"required\": true,\r\n        \"helpMarkDown\": \"Provide the Thycotic Key to use with rule.\"\r\n    },\r\n    {\r\n        \"name\": \"ThycoticSecretId\",\r\n        \"type\": \"string\",\r\n        \"label\": \"Secret Id\",\r\n        \"defaultValue\": \"\",\r\n        \"visibleRule\": \"WinRMAuthentication = Thycotic\",\r\n        \"required\": true,\r\n        \"helpMarkDown\": \"Provide the Thycotic Id to retrieve from secret server.\u003cbr/\u003eEX: 135\"\r\n    },\r\n...\r\n```\r\n\r\nNow, open the _Main.ps1 and replace section with the following.\r\n\r\n```ps\r\n# find these two lines in original and replace with snippet below\r\n$adminUserName = Get-VstsInput -Name AdminUserName -Require\r\n$adminPassword = Get-VstsInput -Name AdminPassword -Require\r\n```\r\n\r\n```ps\r\n$adminUserName = \"\"\r\n$adminPassword = \"\"\r\n$thycoticServer = \"\"\r\n$thycoticRule = \"\"\r\n$thycoticKey = \"\"\r\n$thycoticSecretId = \"\"\r\n\r\n$winRmAuthentication = Get-VstsInput -Name WinRMAuthentication\r\nif ($winRmAuthentication -eq \"Standard\")\r\n{\r\n    $adminUserName = Get-VstsInput -Name AdminUserName -Require\r\n    $adminPassword = Get-VstsInput -Name AdminPassword -Require\r\n}\r\nelse\r\n{\r\n    $thycoticServer = Get-VstsInput -Name ThycoticServer -Require\r\n    $thycoticRule = Get-VstsInput -Name ThycoticRule -Require\r\n    $thycoticKey = Get-VstsInput -Name ThycoticKey -Require\r\n    $thycoticSecretId = Get-VstsInput -Name ThycoticSecretId -Require\r\n\r\n    # First set the Secret Server environment\r\n    # Then, fetch secret and apply to admin username and password\r\n    # Note: WINRM seems to like user name is this format; user@domain\r\n    try {\r\n        tss remove -c\r\n        tss init -u $thycoticServer -r $thycoticRule -k $thycoticKey\r\n        $user = tss secret -s $thycoticSecretId -f username\r\n        $domain = tss secret -s $thycoticSecretId -f domain\r\n        $adminUserName = ($user + \"@\" + $domain)\r\n        $adminPassword = tss secret -s $thycoticSecretId -f password   \r\n    }\r\n    catch [System.Exception] {\r\n        Write-Host (\"##vso[task.LogIssue type=error;]Error within Thycotic Secret Server. Please check your settings.\")\r\n        Write-Host $_\r\n    }\r\n}\r\n```\r\n\r\nFinally, open the vss-extension.json and bump up the version so we may update the extension in Azure DevOps.\r\n\u003e At the time of this writting, current version is 1.5.9\r\n\r\n```json\r\n\"version\": \"1.5.10\",\r\n```\r\n\r\nTo build the VISX, run the command from the parent directory: `iiswebdeploy\\src`.\r\n\r\n\u003e Note: this is a CLI tool use with node js\r\n\r\n```\r\ntfx extension create --manifest-globs vss-extension.json\r\n```\r\n\r\nCompleted, publish the package to your server. *Note: had to use node v10.x to run the gulp commands\r\n\r\n# Thycotic SDK\r\n\r\nOnce our extension is ready, we now need to setup the Thycotic SDK. I simply copied the SDK to the same server as the agent is running. Then add a Batch file named `tss.bat` to allow the agent to run Thycotic.\r\n\r\n\u003e Note: be sure to update the path to match your directory.\r\n\r\n```bat\r\n@echo Off\r\n\"E:\\_Software\\secretserver-sdk-1.4.1-win-x64\\tss.exe\" %*\r\n```\r\n\r\nThen save the batch file to the agent\u0027s user directory. `C:\\Users\\DevOpsBuildSvc\\.dotnet\\tools\\tss.bat`\r\n\r\n\r\n\u003e TIP: I used the Dotnet tools directory so I don\u0027t need to reboot the server to apply new enviroment paths.","Link":"azure-devops-ci-cd","Created":"5/12/2020","Category":"azure"},{"Title":"Command Tools Environment Setup","Markdown":"#Command Tools Environment Setup\r\nCLI tools are becoming more and more popular. Below are some tips to create a batch files to load up your tool belt.\r\n\r\nPersonally, I use the .dotnet\\tools directory to store all the batch files. Since the Environment path was already set there.\r\n\r\n## SASS\r\n\r\n**scss.bat**\r\n\r\n```bat\r\n@echo off\r\nREM Copyright 2016 Google Inc. Use of this source code is governed by an\r\nREM MIT-style license that can be found in the LICENSE file or at\r\nREM https://opensource.org/licenses/MIT.\r\n\r\nREM This script drives the standalone Sass package, which bundles together a\r\nREM Dart executable and a snapshot of Sass. It can be created with `pub run\r\nREM grinder package`.\r\n\r\nset SCRIPTPATH=%~dp0\r\nset arguments=%*\r\n\"%SCRIPTPATH%\\src\\dart.exe\" \"-Dversion=1.15.3\" \"%SCRIPTPATH%\\src\\sass.dart.snapshot\" %arguments%\r\n```\r\n\r\n## Typescript SDK\r\n\r\n**tsc.bat**\r\n\r\n```bat\r\n@echo off\r\nset tsPath=C:\\Program Files (x86)\\Microsoft SDKs\\TypeScript\\3.9\\tsc.js\r\nnode.exe \"%tsPath%\" %~1\r\nexit /b 0\r\n```\r\n\r\n## Thycotic Secret Server\r\n\r\n**tss.bat**\r\n\r\n```bat\r\n@Echo Off\r\nREM \u003e tss init -u \"https://{url}/SecretServer/\" -r \"\" -k \"\"\r\n\r\n\"E:\\_Software\\secretserver-sdk-1.4.1-win-x64\\tss.exe\" \"-kd\" \"E:\\Thycotic\" \"-cd\" \"E:\\Thycotic\\SDK\" %*\r\n```","Link":"command-tools-environment-setup","Created":"7-23-2020","Category":"other"},{"Title":"Convert Hex string to Char string","Markdown":"# Convert Hex string to Char string\r\n\r\nFrom Javascript:\r\n\r\n```js\r\nvar value = String.fromCharCode(\"0x2265\");\r\n```\r\n\r\nFrom C#:\r\n\r\n```c#\r\nstring value = (char)Int16.Parse(\"0x2265\", System.Globalization.NumberStyles.AllowHexSpecifier) ;\r\n\r\nstring value = (char)Int16.Parse(\"2265\", System.Globalization.NumberStyles.AllowHexSpecifier);\r\n```","Link":"convert-hex-string-to-char-string","Created":"3-18-2020","Category":"other"},{"Title":"Raw SQL Statement in NET Core and EntityFrameworkCore","Markdown":"# Raw SQL Statement in NET Core and EntityFrameworkCore\r\nWhen working with ASP.NET Core 2.1 and EntityFrameworkCore 2.1.14, you may want to run raw SQL\r\nstatements to your database. Using a statement like this may fail the compiler.\r\n\r\n```cs\r\ndb.Database.ExecuteSqlCommand(\"DELETE FROM GroupMembers WHERE GroupId = @p0\", group.Id);\r\n```\r\n\r\nTo resolve, add nuget reference: `Microsoft.EntityFrameworkCore.Relational` 2.1.4\r\n","Link":"raw-sql-statement-in-net-core-and-entityframeworkcore","Created":"7-23-2020","Category":"other"},{"Title":"CORS Setup - .NET Framework","Markdown":"# CORS Setup - Framework\r\nBelow are details to setting up CORS Without using any nuget packages nor helpers.\r\n\r\nweb.config\r\n\r\n```xml\r\n\u003csystem.webServer\u003e\r\n  ...\r\n    \u003chttpProtocol\u003e\r\n      \u003ccustomHeaders\u003e\r\n        \u003c!-- CANNOT Use wildcard when using withCredentials --\u003e\r\n        \u003c!--\u003cadd name=\"Access-Control-Allow-Origin\" value=\"*\" /\u003e--\u003e\r\n        \u003cadd name=\"Access-Control-Allow-Origin\" value=\"http://localhost:1337\" /\u003e\r\n\r\n        \u003cadd name=\"Access-Control-Allow-Headers\" value=\"Content-Type\" /\u003e\r\n        \r\n        \u003cadd name=\"Access-Control-Allow-Methods\" value=\"*\" /\u003e\r\n        \u003c!--\u003cadd name=\"Access-Control-Allow-Methods\" value=\"GET,POST,PUT,DELETE,OPTIONS\" /\u003e--\u003e\r\n\r\n        \u003cadd name=\"Access-Control-Allow-Credentials\" value=\"true\" /\u003e\r\n      \u003c/customHeaders\u003e\r\n    \u003c/httpProtocol\u003e\r\n  ..\r\n\u003c/system.webServer\u003e\r\n```\r\n\r\n* When using wildcard \"*\" with `Access-Control-All-Origin`, \r\n\tChrome throws error that CORS policy doesn\u0027t accept wildcards.\r\n\tThis happens when using `Access-Control-Allow-Credentials` is set to TRUE\r\n* When using an actual URL, all GET methods works.\r\n* All OPTIONS preflight fails with 405 Method Not Allowed. Even with an Authorization header\r\n* Adding [OPTIONS] verb to controller/route (ex: [AcceptVerbs(\"POST\",\"OPTIONS\")]), preflight fails with 415 Unsupported Media Type\r\n\r\n\r\nNow using CORS Delegation handler in conjunction with web.config settings\r\n\r\n* While using both, Chrome throws a new error: The \u0027Access-Control-Allow-Origin\u0027 header contains multiple values...\r\n\r\n\r\nCorsDelegateHandler.cs\r\n```cs\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Net;\r\nusing System.Net.Http;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing System.Web;\r\n\r\nnamespace WISE.Api\r\n{\r\n    /// \u003csummary\u003e\r\n    /// \r\n    /// \u003c/summary\u003e\r\n    public class CorsDelegateHandler : DelegatingHandler\r\n    {\r\n        const string Origin = \"Origin\";\r\n        const string AccessControlRequestMethod = \"Access-Control-Request-Method\";\r\n        const string AccessControlRequestHeaders = \"Access-Control-Request-Headers\";\r\n        const string AccessControlAllowOrigin = \"Access-Control-Allow-Origin\";\r\n        const string AccessControlAllowMethods = \"Access-Control-Allow-Methods\";\r\n        const string AccessControlAllowHeaders = \"Access-Control-Allow-Headers\";\r\n\r\n        /// \u003csummary\u003e\r\n        /// \r\n        /// \u003c/summary\u003e\r\n        /// \u003cparam name=\"request\"\u003e\u003c/param\u003e\r\n        /// \u003cparam name=\"cancellationToken\"\u003e\u003c/param\u003e\r\n        /// \u003creturns\u003e\u003c/returns\u003e\r\n        protected override Task\u003cHttpResponseMessage\u003e SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n        {\r\n            bool isCorsRequest = request.Headers.Contains(Origin);\r\n            bool isPreflightRequest = request.Method == HttpMethod.Options;\r\n            if (isCorsRequest)\r\n            {\r\n                if (isPreflightRequest)\r\n                {\r\n                    HttpResponseMessage response = new HttpResponseMessage(HttpStatusCode.NoContent);\r\n                    /*== NOTE: cannot use Access-Control-Allow-Origin in web.config conjuction. May result in duplicate header values ==*/\r\n                    response.Headers.Add(AccessControlAllowOrigin, request.Headers.GetValues(Origin).First());\r\n\r\n                    /*== Not seeing this is required for preflight, since the web.config will be source of truth ==*/\r\n                    //string accessControlRequestMethod = request.Headers.GetValues(AccessControlRequestMethod).FirstOrDefault();\r\n                    //if (accessControlRequestMethod != null)\r\n                    //{\r\n                    //    response.Headers.Add(AccessControlAllowMethods, accessControlRequestMethod);\r\n                    //}\r\n\r\n                    //string requestedHeaders = string.Join(\",\", request.Headers.GetValues(AccessControlRequestHeaders));\r\n                    //if (!string.IsNullOrEmpty(requestedHeaders))\r\n                    //{\r\n                    //    response.Headers.Add(AccessControlAllowHeaders, requestedHeaders);\r\n                    //}\r\n\r\n                    TaskCompletionSource\u003cHttpResponseMessage\u003e tcs = new TaskCompletionSource\u003cHttpResponseMessage\u003e();\r\n                    tcs.SetResult(response);\r\n                    return tcs.Task;\r\n                }\r\n                else\r\n                {\r\n                    return base.SendAsync(request, cancellationToken).ContinueWith\u003cHttpResponseMessage\u003e(t =\u003e\r\n                    {\r\n                        HttpResponseMessage resp = t.Result;\r\n                        /*== NOTE: cannot use Access-Control-Allow-Origin in web.config conjuction. May result in duplicate header values ==*/\r\n                        resp.Headers.Add(AccessControlAllowOrigin, request.Headers.GetValues(Origin).First());\r\n                        return resp;\r\n                    });\r\n                }\r\n            }\r\n            else\r\n            {\r\n                return base.SendAsync(request, cancellationToken);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n```\r\n\r\n\r\nGlobal.asax.cs\r\n```cs\r\nprotected void Application_Start()\r\n{\r\n    GlobalConfiguration.Configure(WebApiConfig.Register);\r\n    GlobalConfiguration.Configuration.MessageHandlers.Add(new CorsDelegateHandler());\r\n    ...\r\n}\r\n```","Link":"cors-setup---.net-framework","Created":"5/12/2020","Category":"netframework"},{"Title":"Importing/Exporting SQL data from Prod to Local DB","Markdown":"# Importing/Exporting SQL data from Prod to Local DB\r\nOnce I was working a web application with a MS SQL datastore, this application was a safety-related software that often gets complains from the customers. Never fails, you fix one things and break three others. Our DBAs did a wonderful job in refreshing production data within our development database, but sometimes, I find it easier just to import the data into MS LocalDB to ease troubleshooting,\r\n\r\nHere is a VBA script for Excel to copy the selected data from Production database (using a reader account, of course) to MS LocalDB.  \r\nRaw data is exported from database into sheet. One sheet per table.  \r\nThen sql script generated to insert data into MS LocalDB  \r\nUse SQLCMD to execute a batch of sql scripts:\r\n\r\n```cmd\r\necho Starting\r\n\"C:\\Program Files\\Microsoft SQL Server\\110\\Tools\\Binn\\SQLCMD.EXE\" -S \"(localdb)\\MSSQLLOCALDB\" -d \"CONDA\" -i \"C:\\Users\\KDJ\\Desktop\\DataExport\\Requests.sql\" -o \"C:\\Users\\KDJ\\Desktop\\DataExport\\Requests_log.txt\"\r\n\"C:\\Program Files\\Microsoft SQL Server\\110\\Tools\\Binn\\SQLCMD.EXE\" -S \"(localdb)\\MSSQLLOCALDB\" -d \"CONDA\" -i \"C:\\Users\\KDJ\\Desktop\\DataExport\\RequestLog.sql\" -o \"C:\\Users\\KDJ\\Desktop\\DataExport\\RequestLog_log.txt\"\r\n\"C:\\Program Files\\Microsoft SQL Server\\110\\Tools\\Binn\\SQLCMD.EXE\" -S \"(localdb)\\MSSQLLOCALDB\" -d \"CONDA\" -i \"C:\\Users\\KDJ\\Desktop\\DataExport\\Items.sql\" -o \"C:\\Users\\KDJ\\Desktop\\DataExport\\Items_log.txt\"\r\necho Completed\r\n```\r\n\r\n```vb\r\nPublic Sub ImportData()\r\n\r\n    QueryDB \"SELECT TOP 1000 ItemId,SerialNumber,WctNumber,ItemType,ContainerType,Matrix,Origin,ItemNumber,Longitude,Latitude,IsDeleted,ComponentId,RequestId,Length,Diameter,WalkdownDate,WalkdownBy,IsOnHold,Building,Unit,Cell,Stage,Floor,TheSystem,SubSystem,Abbreviation,Description,IsOnHoldNotes,ItemStatus FROM [Items] WHERE ItemId \u003e 68997\", \"Items\"\r\nEnd Sub\r\n\r\nPublic Sub CollectData()\r\nDim Requestnum As String\r\n\r\nRequestnum = \"NDA1701117\"\r\n\r\nQueryDB \"SELECT * FROM [Requests] WHERE [RequestNumber] = \u0027\" \u0026 Requestnum \u0026 \"\u0027\", \"Requests\"\r\n\r\nQueryDB \"SELECT * FROM [NDA_Master] WHERE [NDA_Request_Num] = \u0027\" \u0026 Requestnum \u0026 \"\u0027\", \"NDA_Master\"\r\n\r\n    If Not Sheets(\"Requests\").Cells(2, 1).Value = \"\" Then\r\n        Dim RequestId As Integer\r\n        RequestId = Sheets(\"Requests\").Cells(2, 1).Value\r\n        \r\n        QueryDB \"SELECT * FROM [RequestLog] WHERE [RequestId] =\" \u0026 RequestId, \"RequestLog\"\r\n        \r\n        QueryDB \"SELECT * FROM [Items] WHERE [RequestId] =\" \u0026 RequestId, \"Items\"\r\n        \r\n        QueryDB \"SELECT * FROM [Jobs] WHERE [RequestId] =\" \u0026 RequestId, \"Jobs\"\r\n        \r\n        QueryDB \"SELECT * FROM [Turnovers] WHERE [RequestId] =\" \u0026 RequestId, \"Turnovers\"\r\n        \r\n        \u0027if have Turnovers,\r\n        If Sheets(\"Turnovers\").Cells(2, 1).Value \u003c\u003e \"\" Then\r\n            Dim TurnoverIds As String\r\n            Dim SystemIds As String\r\n            Dim StationIds As String\r\n            \r\n            For r = 2 To 100\r\n                If Not Sheets(\"Turnovers\").Cells(r, 1) = \"\" Then\r\n                    If TurnoverIds \u003c\u003e \"\" Then TurnoverIds = TurnoverIds \u0026 \",\"\r\n                    TurnoverIds = TurnoverIds \u0026 Sheets(\"Turnovers\").Cells(r, 1).Value\r\n                    \r\n                    If InStr(1, SystemIds, Sheets(\"Turnovers\").Cells(r, 10).Value) = 0 Then\r\n                        If SystemIds \u003c\u003e \"\" Then SystemIds = SystemIds \u0026 \",\"\r\n                        SystemIds = SystemIds \u0026 Sheets(\"Turnovers\").Cells(r, 10).Value\r\n                    End If\r\n                    \r\n                    If InStr(1, StationIds, Sheets(\"Turnovers\").Cells(r, 9).Value) = 0 Then\r\n                        If StationIds \u003c\u003e \"\" Then StationIds = StationIds \u0026 \",\"\r\n                        StationIds = StationIds \u0026 Sheets(\"Turnovers\").Cells(r, 9).Value\r\n                    End If\r\n                Else\r\n                    Exit For\r\n                End If\r\n            Next r\r\n            \r\n            QueryDB \"SELECT * FROM [JobReplicate] WHERE [TurnoverId] IN (\" \u0026 TurnoverIds \u0026 \")\", \"JobReplicate\"\r\n            \r\n            QueryDB \"SELECT * FROM [JobReplicateDetail] WHERE [TurnoverId] IN (\" \u0026 TurnoverIds \u0026 \")\", \"JobReplicateDetail\"\r\n            \r\n            QueryDB \"SELECT * FROM [Turnovers_Personnel] WHERE [TurnoverId] IN (\" \u0026 TurnoverIds \u0026 \")\", \"Turnovers_Personnel\"\r\n            \r\n            If Len(SystemIds) \u003e 0 Then\r\n                QueryDB \"SELECT * FROM [NDASystems] WHERE [systems_id] IN (\" \u0026 SystemIds \u0026 \")\", \"NDASystems\"\r\n            End If\r\n            \r\n            If Len(StationIds) \u003e 0 Then\r\n                QueryDB \"SELECT * FROM [Stations] WHERE [StationId] IN (\" \u0026 StationIds \u0026 \")\", \"Stations\"\r\n            End If\r\n            \r\n            QueryDB \"SELECT * FROM [NDAComponents] WHERE [components_systemid] IN (\" \u0026 SystemIds \u0026 \")\", \"NDAComponents\"\r\n        End If\r\n\r\n        \r\n        Dim JobIds As String\r\n        For r = 2 To 1000\r\n            If Not Sheets(\"Jobs\").Cells(r, 1) = \"\" Then\r\n                If JobIds \u003c\u003e \"\" Then JobIds = JobIds \u0026 \",\"\r\n                JobIds = JobIds \u0026 Sheets(\"Jobs\").Cells(r, 1).Value\r\n            Else\r\n                Exit For\r\n            End If\r\n        Next r\r\n        \r\n        QueryDB \"SELECT * FROM [Jobs_Personnel] WHERE [JobId] IN (\" \u0026 JobIds \u0026 \")\", \"Jobs_Personnel\"\r\n        \r\n        QueryDB \"SELECT * FROM [Batches] WHERE [RequestId] =\" \u0026 RequestId, \"Batches\"\r\n        \r\n        \u0027if have Turnovers,\r\n        If Sheets(\"Batches\").Cells(2, 1).Value \u003c\u003e \"\" Then\r\n            Dim BatchIds As String\r\n            For r = 2 To 1000\r\n                If Not Sheets(\"Batches\").Cells(r, 1) = \"\" Then\r\n                    If BatchIds \u003c\u003e \"\" Then BatchIds = BatchIds \u0026 \",\"\r\n                    BatchIds = BatchIds \u0026 Sheets(\"Batches\").Cells(r, 1).Value\r\n                Else\r\n                    Exit For\r\n                End If\r\n            Next r\r\n            \r\n            QueryDB \"SELECT * FROM [BatchWorkflow] WHERE [BatchId] IN (\" \u0026 BatchIds \u0026 \")\", \"BatchWorkflow\"\r\n        End If\r\n        \r\n        QueryDB \"SELECT * FROM [CidmsTickets]\", \"CidmsTickets\"\r\n\r\n    End If\r\nEnd Sub\r\n\r\nPrivate Sub QueryDB(query As String, SheetName As String)\r\nApplication.ScreenUpdating = False\r\n\r\n    Sheets(SheetName).Select\r\n\r\n    \u0027Clear Data\r\n    ActiveCell.SpecialCells(xlLastCell).Select\r\n    Rows(\"1:\" \u0026 ActiveCell.row).Select\r\n    Selection.Delete Shift:=xlUp\r\n    Range(\"A1\").Select\r\n\r\n    Dim dbResults As ADODB.Recordset\r\n    Set dbname = openDBConn()\r\n    Set dbResults = dbname.Execute(query)\r\n    \r\n    \r\n    \u0027build Header\r\n    For c = 1 To dbResults.Fields.Count\r\n        \u0027Sheets(SheetName).Cells(1, c) = dbResults.Fields.Item(c - 1).Type\r\n        Sheets(SheetName).Cells(1, c) = dbResults.Fields.Item(c - 1).Name\r\n    Next c\r\n    \r\n    Dim r\r\n    r = 1\r\n    \u0027transfer data to spreadsheet\r\n    While Not dbResults.EOF\r\n        r = r + 1\r\n        For c = 0 To dbResults.Fields.Count - 1\r\n            Sheets(SheetName).Cells(r, c + 1) = dbResults(c).Value\r\n        Next c\r\n        \r\n        dbResults.MoveNext\r\n    Wend\r\n    \r\n    dbname.Close\r\n    \u0027dbname = Nothing\r\n    Set dbResults = Nothing\r\n    \r\n    Call InsertBuilder\r\n\r\nApplication.ScreenUpdating = True\r\nEnd Sub\r\n\r\nPrivate Sub InsertBuilder()\r\n\u0027MUST Add Reference: Microsoft Scripting Runtime\r\n    Dim fso As New FileSystemObject\r\n    Dim stream As TextStream\r\n    Set stream = fso.CreateTextFile(\"C:\\Users\\KDJ\\Desktop\\DataExport\\\" \u0026 ActiveSheet.Name \u0026 \".sql\", True, True)\r\n    \r\n    stream.WriteLine \"SET IDENTITY_INSERT [dbo].[\" \u0026 ActiveSheet.Name \u0026 \"] ON\"\r\n    \r\n    Dim InsertHeader As String\r\n    InsertHeader = \"INSERT INTO [dbo].[\" \u0026 ActiveSheet.Name \u0026 \"] (\"\r\n       \r\n    \u0027 Get cell boundaries\r\n    lastrow = ActiveSheet.UsedRange.Rows(ActiveSheet.UsedRange.Rows.Count).row\r\n    LastCol = ActiveSheet.UsedRange.columns(ActiveSheet.UsedRange.columns.Count).Column\r\n    \r\n        \u0027issue with unicode char in teh Item description\r\n    If ActiveSheet.Name = \"Items\" Then\r\n        Range(\"AA2:AA\" \u0026 lastrow).ClearContents\r\n    End If\r\n\r\n    Dim col As String\r\n    For c = 1 To LastCol\r\n        If Not Cells(1, c).Value = \"\" Then\r\n            If col \u003c\u003e \"\" Then col = col \u0026 \",\"\r\n            col = col \u0026 \"[\" \u0026 Cells(1, c).Value \u0026 \"]\"\r\n        End If\r\n    Next c\r\n    InsertHeader = InsertHeader \u0026 col \u0026 \") VALUES (\"\r\n    \r\n    Dim row As String\r\n    For r = 2 To lastrow\r\n        If Not Cells(r, 1).Value = \"\" Then\r\n            For c = 1 To LastCol\r\n                If row \u003c\u003e \"\" Then row = row \u0026 \",\"\r\n                \r\n                If Cells(r, c) = \"\" Then\r\n                    row = row \u0026 \"NULL\"\r\n                ElseIf Cells(r, c) = \"False\" Then\r\n                    row = row \u0026 0\r\n                ElseIf Cells(r, c) = \"True\" Then\r\n                    row = row \u0026 1\r\n                ElseIf IsNumeric(Cells(r, c)) Then\r\n                    row = row \u0026 Cells(r, c).Value\r\n                Else\r\n                    row = row \u0026 \"N\u0027\" \u0026 Replace(Cells(r, c).Value, \"\u0027\", \"\u0027\u0027\") \u0026 \"\u0027\"\r\n                End If\r\n\r\n            Next c\r\n            \r\n            \u0027TODO: replace unicode char\r\n            \u002790? Elbow\r\n            row = Replace(row, Chr(63), \"\")\r\n            row = Replace(row, ChrW(8206), \"\")\r\n            \u0027Debug.Print row\r\n            \r\n            stream.WriteLine InsertHeader \u0026 row \u0026 \")\"\r\n            row = \"\" \u0027reset string\r\n        End If\r\n                \r\n    Next r\r\n    \r\n    stream.WriteLine \"SET IDENTITY_INSERT [dbo].[\" \u0026 ActiveSheet.Name \u0026 \"] OFF\"\r\n    \r\n    \u0027 Close the file.\r\n    stream.Close\r\nEnd Sub\r\n\r\n\u0027MUST include highest version of Microsoft ActiveX Data Objects X.X Library\r\n\u0027(Tools-\u003eReferences)\r\nPrivate Function openDBConn() As ADODB.Connection\r\n    Dim newDBConn As ADODB.Connection\r\n    Set newDBConn = New ADODB.Connection\r\n    newDBConn.CommandTimeout = 60\r\n    Dim strConn As String\r\n    strConn = \"PROVIDER=SQLOLEDB;DATA SOURCE=DDSQL06;INITIAL CATALOG=CONDA;User ID=CONDA_Reader;Password=;\" \u0027INTEGRATED SECURITY=SSPI\"\r\n    \u0027strConn = \"PROVIDER=SQLOLEDB;DATA SOURCE=ddsqltest06;INITIAL CATALOG=CONDA;User ID=CONDA_Owner;Password=;\"\r\n    \u0027strConn = \"PROVIDER=SQLOLEDB;SERVERe=(localdb)\\MSSQLLocalDB;Initial Catalog=CONDA_NEW;INTEGRATED SECURITY=true;Trusted_Connection=true;\"\r\n    \u0027strConn = \"Provider=SQLNCLI11;Server=(localdb)\\MSSQLLocalDB;AttachDBFileName=C:\\Users\\KDJ\\CONDA_NEW.mdf;Database=CONDA_NEW;Trusted_Connection=yes\"\r\n    \r\n    newDBConn.Open strConn\r\n    Set openDBConn = newDBConn\r\nEnd Function\r\n\r\n```","Link":"importing/exporting-sql-data-from-prod-to-local-db","Created":"7-23-2020","Category":"other"},{"Title":"FileSystemWatcher","Markdown":"# FileSystemWatcher\r\n\r\nFileSystemWatcher is a Microsoft [class](https://docs.microsoft.com/en-us/dotnet/api/system.io.filesystemwatcher?view=netframework-4.8). \r\n\r\nNeeded the ability to watch changes for a directory of Typescript files. Below is an example from a console application I was playing with.\r\n\r\n\u003e NOTE: FileSystemWatcher will not fired when both Modfied Date and Last Access date are update together\r\n\r\n```csharp\r\n[System.Security.Permissions.PermissionSet(System.Security.Permissions.SecurityAction.Demand, Name = \"FullTrust\")]\r\nstatic void Main(string[] args)\r\n{\r\n    System.IO.FileSystemWatcher watcher = new System.IO.FileSystemWatcher\r\n    {\r\n        Path = @\"C:\\Directory\\\",\r\n        NotifyFilter = System.IO.NotifyFilters.LastWrite,\r\n        Filter = \"*.txt\",\r\n        IncludeSubdirectories = false\r\n    };\r\n\r\n    watcher.Error += OnError;\r\n    watcher.Changed += new System.IO.FileSystemEventHandler(OnChanged);\r\n    watcher.EnableRaisingEvents = true;\r\n\r\n\r\n    // Wait for the user to quit the program.\r\n    System.Console.WriteLine(\"Press \\\u0027q\\\u0027 to quit the sample.\");\r\n    while (System.Console.Read() != \u0027q\u0027) ;\r\n}\r\n\r\n\r\nprivate static void OnChanged(object source, System.IO.FileSystemEventArgs e)\r\n{\r\n    watcher.EnableRaisingEvents = false;\r\n\r\n    //TODO: Your Code Here ----\u003e\r\n\r\n    watcher.EnableRaisingEvents = true;\r\n}\r\n\r\nstatic void OnError(object sender, System.IO.ErrorEventArgs e)\r\n{\r\n    System.Exception ex = e.GetException();\r\n    System.Console.WriteLine(ex.Message);\r\n    if (ex.InnerException != null)\r\n    {\r\n        System.Console.WriteLine(ex.InnerException);\r\n    }\r\n}\r\n```","Link":"filesystemwatcher","Created":"3-18-2020","Category":"dotnetframework"},{"Title":"HTA.md","Markdown":"\r\n\r\n\u003chtml\u003e\r\n    \u003chead\u003e\r\n        \u003ctitle\u003eAPI Tester\u003c/title\u003e\r\n        \u003cmeta http-equiv=\"x-ua-compatible\" content=\"ie=10\"/\u003e\r\n        \u003chta:application id=\"oHTA\" applicationname=\"API Tester\" version=\"1.0\" singleinstance=\"yes\"\u003e\u003c/hta:application\u003e\r\n        \u003cscript type=\"text/javascript\" src=\"jquery-3.1.1.js\"\u003e\u003c/script\u003e\r\n    \u003c/head\u003e\r\n\u003cbody\u003e\r\n\r\n\u003cscript language=\"VBScript\" type=\"text/vbscript\"\u003e\r\n            Sub Alert()\r\n                Msgbox \"This is a test\"\r\n            End Sub\r\n        \u003c/script\u003e\r\n\r\n\u003c/body\u003e\r\n\u003c/html\u003e","Created":"","Category":"other"},{"Title":"JQuery Ajax Snippet","Markdown":"# JQuery Ajax Snippet\r\n\r\nCode snippets is a feature in Visual Studio to help speed development by providing common used function.\r\n\r\n\u003e Shortcut menu can be displayed by pressing `Ctrl+K` `Ctrl+X` within an open document in Visual Studio.\r\n\r\nBelow is a custom Typescript snippet for Visual Studio to generate code for a JQuery Ajax function.  \r\nCreate a `jQueryAjax.snippet` file and paste content below. \r\nThen move file to `~\\Documents\\Visual Studio NNNN\\Code Snippets\\TypeScript\\My Code Snippets`.\r\n\r\n```xml\r\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e  \r\n\u003cCodeSnippets  xmlns=\"http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet\"\u003e  \r\n    \u003cCodeSnippet Format=\"1.0.0\"\u003e  \r\n        \u003cHeader\u003e  \r\n          \u003cTitle\u003ejQuery Ajax\u003c/Title\u003e\r\n\t\t\t    \u003cAuthor\u003eJeremy Travis\u003c/Author\u003e  \r\n\t\t\t    \u003cDescription\u003eCode snippet for jQuery Ajax with basic options\u003c/Description\u003e\r\n\t\t\t    \u003cShortcut\u003eajax\u003c/Shortcut\u003e\r\n          \u003cSnippetTypes\u003e\r\n            \u003cSnippetType\u003eExpansion\u003c/SnippetType\u003e\r\n            \u003cSnippetType\u003eSurroundsWith\u003c/SnippetType\u003e\r\n          \u003c/SnippetTypes\u003e\r\n        \u003c/Header\u003e  \r\n        \u003cSnippet\u003e\r\n          \u003cDeclarations\u003e\r\n            \u003cLiteral\u003e\r\n              \u003cID\u003etype\u003c/ID\u003e\r\n              \u003cToolTip\u003eType\u003c/ToolTip\u003e\r\n              \u003cDefault\u003ePOST\u003c/Default\u003e\r\n            \u003c/Literal\u003e\r\n            \u003cLiteral\u003e\r\n              \u003cID\u003evar\u003c/ID\u003e\r\n              \u003cToolTip\u003eSome model variable\u003c/ToolTip\u003e\r\n              \u003cDefault\u003emyModel\u003c/Default\u003e\r\n            \u003c/Literal\u003e\r\n          \u003c/Declarations\u003e\r\n            \u003cCode Language=\"TypeScript\" Kind=\"any\" Delimiter=\"%\"\u003e \r\n              \u003c![CDATA[\r\n$.ajax({\r\n    url: \u0027@Url.Action(\"ACTION\", \"CONTROLLER\")\u0027,\r\n\ttype: \"%type%\",\r\n\tcache: false,\r\n\tasync: true,\r\n\tdata: { model: %var% },\r\n\t\r\n\t//Optional\r\n\tcontentType: \"application/json; charset=utf-8\", //inform the server what data type you are sending to the server\r\n\tdataType: \"json\", //This specifies the type of data you are expecting from the server. (i.e. not the datatype that you are sending to the server)\r\n\t\t\t\t\r\n\tbeforeSend: function() { },\r\n\tcomplete: function () { },\r\n\tsuccess: function (data) {\r\n\t\tconsole.log(data);\r\n    if (data.success === undefined) {\r\n        DisplayHtmlError(data);\r\n    }\r\n    else if (!data.success) {\r\n        DisplayVaildationSummary(\"div-err\", data.message);\r\n    }\r\n    else \r\n        window.location.reload();\r\n        %selected%\r\n\t},\r\n\terror: function (xhr, ajaxOptions, error) {\r\n      alert(xhr.responseText);\r\n    }\r\n});\r\n              ]]\u003e  \r\n            \u003c/Code\u003e  \r\n        \u003c/Snippet\u003e  \r\n    \u003c/CodeSnippet\u003e  \r\n\u003c/CodeSnippets\u003e  \r\n```","Link":"jquery-ajax-snippet","Created":"4-22-2020","Category":"visualstudio"},{"Title":"JQuery On Snippet","Markdown":"# JQuery On Snippet\r\n\r\nCode snippets is a feature in Visual Studio to help speed development by providing common used function.\r\n\r\n\u003e Shortcut menu can be displayed by pressing `Ctrl+K` `Ctrl+X` within an open document in Visual Studio.\r\n\r\nBelow is a custom Typescript snippet for Visual Studio to generate code for a JQuery OnClick function.  \r\nCreate a `FileName.snippet` file and paste content below. \r\nThen move file to `~\\Documents\\Visual Studio NNNN\\Code Snippets\\TypeScript\\My Code Snippets`.\r\n\r\nPersonally, find it better to bind the click event to the document with a selector to match. This allows events to be trigger from multiple HTML elements.\r\n\r\n```xml\r\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e  \r\n\u003cCodeSnippets  xmlns=\"http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet\"\u003e  \r\n    \u003cCodeSnippet Format=\"1.0.0\"\u003e  \r\n        \u003cHeader\u003e  \r\n          \u003cTitle\u003ejQuery OnClick\u003c/Title\u003e\r\n\t\t\t    \u003cAuthor\u003eJeremy Travis\u003c/Author\u003e  \r\n\t\t\t    \u003cDescription\u003eCode snippet for jQuery OnClick\u003c/Description\u003e\r\n\t\t\t    \u003cShortcut\u003ejqon\u003c/Shortcut\u003e\r\n          \u003cSnippetTypes\u003e\r\n            \u003cSnippetType\u003eExpansion\u003c/SnippetType\u003e\r\n            \u003cSnippetType\u003eSurroundsWith\u003c/SnippetType\u003e\r\n          \u003c/SnippetTypes\u003e\r\n        \u003c/Header\u003e  \r\n        \u003cSnippet\u003e\r\n          \u003cDeclarations\u003e\r\n            \u003cLiteral\u003e\r\n              \u003cID\u003eevent\u003c/ID\u003e\r\n              \u003cToolTip\u003eevent type\u003c/ToolTip\u003e\r\n              \u003cDefault\u003eclick\u003c/Default\u003e\r\n            \u003c/Literal\u003e\r\n            \u003cLiteral\u003e\r\n              \u003cID\u003eselector\u003c/ID\u003e\r\n              \u003cToolTip\u003eJQuery Selector\u003c/ToolTip\u003e\r\n              \u003cDefault\u003e#btn-\u003c/Default\u003e\r\n            \u003c/Literal\u003e\r\n          \u003c/Declarations\u003e\r\n            \u003cCode Language=\"TypeScript\" Kind=\"any\" Delimiter=\"%\"\u003e \r\n              \u003c![CDATA[\r\n$(document).on(\u0027%event%\u0027, \u0027%selector%\u0027, function (e) {\r\n    e.stopImmediatePropagation();\r\n    let id = $(this).attr(\u0027data-id\u0027);\r\n});\r\n              ]]\u003e  \r\n            \u003c/Code\u003e  \r\n        \u003c/Snippet\u003e  \r\n    \u003c/CodeSnippet\u003e  \r\n\u003c/CodeSnippets\u003e  \r\n```","Link":"jquery-on-snippet","Created":"4-22-2020","Category":"visualstudio"},{"Title":"Launch IIS Express via Command Prompt","Markdown":"# Launch IIS Express via Command Prompt\r\n\r\nOften times I needed to host and test a web site locally. IIS Express installs with Visual Studio, does this very thing.\r\n\r\nSite Ids can be listed by viewing the `applicationhost.config` file.\r\n\r\nOpen command prompt.\r\n```bat\r\n@\"C:\\Program Files (x86)\\IIS Express\\iisexpress.exe\" /systray:true /config:C:\\Users\\\u003cUSERPROFILE\u003e\\Documents\\IISExpress\\config\\applicationhost.config /siteid:1\r\n```\r\n\r\nOther command switches:\r\n\r\n```bat\r\n/path:C:\\inetpub\\wwwroot\\\r\n/port:8888\r\n```","Link":"launch-iis-express-via-command-prompt","Created":"3-18-2020","Category":"iis"},{"Title":"Netcenter Roles DI Extension","Markdown":"# Netcenter Roles DI Extension\r\n\r\nWhile setting up Windows Authentication and Authorization via .Net Core API application with EntityGraphQL (GraphQL service by Luke Murray), I needed to apply custom Security Claims to the User\u0027s identity.  \r\nBelow is example of how I wired up both middleware and application service to fetch roles then merge into the Windows Authenticated claims.\r\n\r\nNetcenter is an in-house API use to provide a centralized services for various task among our applications.\r\n\r\nThis option shows how we extend the application service.\r\n\r\n*Extensions/ApplicationEx.cs*\r\n```cs\r\nusing Microsoft.AspNetCore.Builder;\r\nusing Microsoft.AspNetCore.Diagnostics;\r\nusing Microsoft.AspNetCore.Http;\r\nusing System.Net;\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing System.Security.Claims;\r\nusing System.Linq;\r\n\r\nnamespace WebApplication1.Api.Extensions\r\n{\r\n    public static class ApplicationExt\r\n    {\r\n        /// \u003csummary\u003e\r\n        /// Add Netcenter Roles to User\u0027s Identity\r\n        /// \u003c/summary\u003e\r\n        /// \u003cparam name=\"app\"\u003e\u003c/param\u003e\r\n        public static void UseNetcenterRoles(this IApplicationBuilder app)\r\n        {\r\n            app.Use(async (context, next) =\u003e\r\n            {\r\n                if (context.User != null \u0026\u0026 context.User.Identity.IsAuthenticated)\r\n                {\r\n                    var claims = new System.Collections.Generic.List\u003cSystem.Security.Claims.Claim\u003e();\r\n\r\n                    //== Could fetch svc from app builder\r\n                    //var a = app.ApplicationServices.GetService\u003cNetcenter.Sdk.INetcenterSDK\u003e();\r\n\r\n                    var netcenter = context.RequestServices.GetService\u003cNetcenter.Sdk.INetcenterSDK\u003e();\r\n                    netcenter.UserAppRoleNames(context.User.Identity.Name)\r\n                        .ForEach(delegate (string role) {\r\n                            claims.Add(new Claim(ClaimTypes.Role, role));\r\n                        });\r\n\r\n                    // Doing this will require devs to merge identities in controller or services\r\n                    //var claimsIdentity = new System.Security.Claims.ClaimsIdentity(claims);\r\n                    //context.User.AddIdentity(claimsIdentity);\r\n\r\n                    //add new Role claims directly to default identity\r\n                    context.User.Identities.FirstOrDefault().AddClaims(claims);\r\n                }\r\n\r\n                await next();\r\n            });\r\n        }\r\n\r\n    }\r\n}\r\n\r\n```\r\n\r\nThis option uses a middleware class within the `ApplicationBuilder` that injects on every incoming route.\r\n\r\n*Extensions/NetcenterRoles.cs*\r\n```cs\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Security.Claims;\r\nusing System.Threading.Tasks;\r\nusing Microsoft.Extensions.DependencyInjection;\r\n\r\nnamespace WebApplication1.Api.Extensions\r\n{\r\n    public class NetcenterRoles\r\n    {\r\n        private readonly Microsoft.AspNetCore.Http.RequestDelegate _next;\r\n\r\n        /// \u003csummary\u003e\r\n        /// Middleware to add Netcenter Roles to User\u0027s Identity\r\n        /// \u003c/summary\u003e\r\n        /// \u003cparam name=\"next\"\u003e\u003c/param\u003e\r\n        public NetcenterRoles(Microsoft.AspNetCore.Http.RequestDelegate next)\r\n        {\r\n            _next = next;\r\n        }\r\n\r\n        public async System.Threading.Tasks.Task InvokeAsync(Microsoft.AspNetCore.Http.HttpContext httpContext)\r\n        {\r\n            if (httpContext.User != null \u0026\u0026 httpContext.User.Identity.IsAuthenticated)\r\n            {\r\n                var claims = new System.Collections.Generic.List\u003cSystem.Security.Claims.Claim\u003e();\r\n\r\n                var netcenter = httpContext.RequestServices.GetService\u003cNetcenter.Sdk.INetcenterSDK\u003e();\r\n                netcenter.UserAppRoleNames(httpContext.User.Identity.Name)\r\n                    .ForEach(delegate (string role) {\r\n                        claims.Add(new Claim(ClaimTypes.Role, role));\r\n                    });\r\n\r\n                // Doing this will require devs to merge identities in controller or services\r\n                //var claimsIdentity = new System.Security.Claims.ClaimsIdentity(claims);\r\n                //httpContext.User.AddIdentity(claimsIdentity);\r\n\r\n                //add new Role claims directly to default identity\r\n                httpContext.User.Identities.FirstOrDefault().AddClaims(claims);\r\n\r\n                await _next(httpContext);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\nFinally, we add/use the middleware in our `Startup.cs`.\r\n\r\n```cs\r\nusing Microsoft.AspNetCore.Builder;\r\nusing Microsoft.AspNetCore.Hosting;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing WebApplication1.Api.Extensions;\r\n\r\nnamespace WebApplication1.Api\r\n{\r\n    public class Startup\r\n    {\r\n        public IConfiguration Configuration { get; }\r\n\r\n\r\n        public Startup(IConfiguration configuration)\r\n        {\r\n            Configuration = configuration;\r\n        }\r\n\r\n        public void ConfigureServices(IServiceCollection services)\r\n        {\r\n            services.AddNetcenter(Configuration);\r\n            services.AddMVC();\r\n        }\r\n\r\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env)\r\n        {\r\n            if (env.IsDevelopment())\r\n            {\r\n                app.UseDeveloperExceptionPage();\r\n            }\r\n\r\n            /*== Could use either method here ==*/\r\n            //app.UseMiddleware\u003cNetcenterRoles\u003e();\r\n            app.UseNetcenterRoles();\r\n\r\n            app.UseMvc();\r\n        }\r\n    }\r\n}\r\n\r\n```","Link":"netcenter-roles-di-extension","Created":"5-12-2020","Category":"dotnetcore"},{"Title":"NPM Tips.md","Markdown":"\r\n# NPM Tips and Tricks\r\n\r\n* when clearing npm cache for service account. not able to get packages from mutil-registries.\r\nHad to include additional cmd; npm i @ports/vue-datepicker --registry http://devapps2:8080/\r\nfind way to download private scope .npmrc @ports:registry=http://devapps2:8080/","Created":"","Category":"other"},{"Title":"Oracle OLEDB provider for MSSQLLOCALDB","Markdown":"# Oracle OLEDB provider for MSSQLLOCALDB\r\nOnce I was tasked to convert an Excel project into a web application. Often times, I like to build a local database with SQL project to track changes and to ease local development. However, this Excel application was a monster. VBA macros and Store Procedures everywhere. Thankfully, the original developer use a Ms SQL server as the back-end data store. Boy, as this monster unfold, there was a Oracle link server hided in the wild.\r\n\r\nBelow is how I was able to add the Oracle OLEDB provider to MS SQL LocalDB.  \r\nHere is error message I recieved:\r\n```\r\n(644,1): SQL72014: .Net SqlClient Data Provider: \r\nMsg 7438, Level 16, State 1, Procedure sp_RADAR_SDG_MASTER_LIST_VIEW_SELECT_Compare_To_ADAT, \r\nLine 48 The 32-bit OLE DB provider \"OraOLEDB.Oracle\" cannot be loaded \r\nin-process on a 64-bit SQL Server\r\n```\r\n\r\nFirst download the provider\r\n* https://www.oracle.com/database/technologies/odac-downloads.html\r\n* Download ODAC122010Xcopy_x64.zip\r\n* use login from bugmennot.com to download\r\n  * login.oracle.com\r\n  * ikigigiadtaxhhsgjn@awdrt.org\r\n  * jnsdfsKuhd\u0026-45\r\n* unzip contents\r\n* Run cmd prompt as Administrator\r\n* CD to unzipped directory\r\n* run `install.bat OLEDB C:\\app odac`\r\n* Set OraOLEDB.Oracle provider to `Allow inprocess`\r\n  * Due to permissions, had to allow access to registry or use reg import\r\n\r\n```reg\r\nWindows Registry Editor Version 5.00\r\n\r\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SQL Server\\MSSQL13E.LOCALDB\\Providers\\OraOLEDB.Oracle]\r\n\"AllowInProcess\"=dword:00000001\r\n```\r\n\r\n* Restart MSSQLLOCALDB services\r\n* sqllocaldb stop mssqllocaldb\r\n* sqllocaldb start mssqllocaldb\r\n\r\nNow after that was installed, able to confirm installation by connecting to MSSQLOCALDB via SSMM. \r\n\r\nHit the query again and got a new error message.\r\n```\r\nMsg 7302, Level 16, State 1, Procedure sp_RADAR_SDG_MASTER_LIST_VIEW_SELECT_Compare_To_ADAT, Line 644\r\nCannot create an instance of OLE DB provider \"OraOLEDB.Oracle\" for linked server \"RADAR\".\r\n** An error was encountered during execution of batch. Exiting.\r\n```\r\n\r\nDetails how to correct this error was found here:\r\nhttps://fullparam.wordpress.com/2011/05/05/cannot-create-an-instance-of-ole-db-provider-oraoledb-oracle-for-linked-server/\r\n\r\nIn-short, had to add the proper directory to the lookup path.\r\n* Since I installed the OLEDB provider to C:\\app directory, hade to add both;\r\n  C:\\app and c:\\app\\bin to the System Path Environment variable,\r\n* Restart computer","Link":"oracle-oledb-provider-for-mssqllocaldb","Created":"6/22/2020","Category":"visualstudio"},{"Title":"Building and Publishing ASP.NET Core to Nuget \u0026 Github","Markdown":"# Building and Publishing ASP.NET Core to Nuget \u0026 Github\r\n\r\n* CD into directory with *.csproj\r\n* dotnet restore\r\n* dotnet pack -c Release\r\n* dotnet nuget push bin\\Release\\EntityGraphQL.0.60.2.nupkg -k nuget_owner1 -s http://devapps2/Ports.Nuget/nuget\r\n* Github requires additional authentication. Must obtain a token key from your Github profile.\r\n* Create a file; `nuget.config` in the project directory if one is not present.\r\n* dotnet command will bubble up the directory to locate the nearest one.\r\n* In the nuget.config, paste in the following, replacing \u003cUserName\u003e and \u003cTokenPWd\u003e:\r\n```xml\r\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\r\n\u003cconfiguration\u003e\r\n    \u003csolution\u003e\r\n      \u003cadd key=\"disableSourceControlIntegration\" value=\"true\" /\u003e\r\n    \u003c/solution\u003e\r\n    \u003cconfig\u003e\r\n      \u003cadd key=\"repositoryPath\" value=\".\\packages\" /\u003e\r\n    \u003c/config\u003e\r\n    \u003cpackageSources\u003e\r\n        \u003cclear /\u003e\r\n        \u003cadd key=\"nuget.org\" value=\"https://www.nuget.org/api/v2/\" /\u003e\r\n        \u003cadd key=\"PORTS.Nuget\" value=\"http://devapps2/Ports.Nuget/nuget/\" /\u003e\r\n        \u003cadd key=\"GH:\u003cUserName\u003e\" value=\"https://nuget.pkg.github.com/\u003cUserName\u003e/index.json\" /\u003e\r\n    \u003c/packageSources\u003e\r\n    \u003cpackageSourceCredentials\u003e\r\n        \u003cgithub\u003e\r\n            \u003cadd key=\"Username\" value=\"\u003cLoginName\u003e\" /\u003e\r\n            \u003cadd key=\"ClearTextPassword\" value=\"\u003cTokenPwd\u003e\" /\u003e\r\n        \u003c/github\u003e\r\n    \u003c/packageSourceCredentials\u003e\r\n\u003c/configuration\u003e\r\n```\r\n* NOTE: must use nuget.exe, not dotnet.exe\r\n* nuget push bin\\Release\\EntityGraphQL.0.60.2.nupkg -ApiKey \u003cTokenPwd\u003e -src GH:\u003cUserName\u003e\r\n\r\n\r\n## Other Things:\r\n\r\nYou can add sources to the global nuget.config.\r\n\r\n```\r\nnuget.exe sources Add -Name \"GH:jtravis76\" -Source https://nuget.pkg.github.com/jtravis76/index.json\r\n```","Link":"building-and-publishing-asp.net-core-to-nuget-\u0026-github","Created":"7-23-2020","Category":"other"},{"Title":"Event Log - Powershell","Markdown":"#Event Log - Powershell\r\n\r\nWhile setting up logging for .NET Core, I was experimenting writing to a Window\u0027s Event Log. Below is a PowerShell example.\r\n\r\n\u003e Netcenter AD Sync was a Windows Service application and this logged the activities.\r\n\r\n```ps\r\n#-- Creates a new log and source. Expend Application in the node tree.\r\nNew-EventLog -LogName \"Netcenter AD Sync\" -Source NetcenterADSyncService\r\n\r\n#-- Write a test log\r\nWrite-EventLog -LogName \"Netcenter AD Sync\" -Source NetcenterADSyncService -EventId 0 -Message \"This is a TEST\" -EntryType Information\r\n```","Link":"event-log---powershell","Created":"6-1-2020","Category":"pshell"},{"Title":"Export SQL Schema - Powershell","Markdown":"#Export SQL Schema - Powershell\r\n\r\nHere is a nice script I found that export the SQL schema.\r\n\r\n```ps\r\n# Usage:  powershell ExportSchema.ps1 \"SERVERNAME\" \"DATABASE\" \"C:\\\u003cYourOutputPath\u003e\"\r\n\r\n\r\n# Start Script\r\nSet-ExecutionPolicy RemoteSigned\r\n\r\n# Set-ExecutionPolicy -ExecutionPolicy:Unrestricted -Scope:LocalMachine\r\nfunction GenerateDBScript([Microsoft.SqlServer.Management.Common.ServerConnection]$serverName, [string]$dbname, [string]$scriptpath)\r\n{\r\n  [System.Reflection.Assembly]::LoadWithPartialName(\"Microsoft.SqlServer.SMO\") | Out-Null\r\n  [System.Reflection.Assembly]::LoadWithPartialName(\"System.Data\") | Out-Null\r\n  $srv = new-object \"Microsoft.SqlServer.Management.SMO.Server\" $serverName\r\n\r\n  Write-Host $srv.Information.Version\r\n\r\n  $srv.SetDefaultInitFields([Microsoft.SqlServer.Management.SMO.View], \"IsSystemObject\")\r\n  $db = New-Object \"Microsoft.SqlServer.Management.SMO.Database\"\r\n  $db = $srv.Databases[$dbname]\r\n  $scr = New-Object \"Microsoft.SqlServer.Management.Smo.Scripter\"\r\n  $deptype = New-Object \"Microsoft.SqlServer.Management.Smo.DependencyType\"\r\n  $scr.Server = $srv\r\n  $options = New-Object \"Microsoft.SqlServer.Management.SMO.ScriptingOptions\"\r\n  $options.AllowSystemObjects = $false\r\n  $options.IncludeDatabaseContext = $true\r\n  $options.IncludeIfNotExists = $false\r\n  $options.ClusteredIndexes = $true\r\n  $options.Default = $true\r\n  $options.DriAll = $true\r\n  $options.Indexes = $true\r\n  $options.NonClusteredIndexes = $true\r\n  $options.IncludeHeaders = $false\r\n  $options.ToFileOnly = $true\r\n  $options.AppendToFile = $true\r\n  $options.ScriptDrops = $false \r\n\r\n  # Set options for SMO.Scripter\r\n  $scr.Options = $options\r\n\r\n  #=============\r\n  # Tables\r\n  #=============\r\n  $options.FileName = $scriptpath + \"\\$($dbname)_tables.sql\"\r\n  New-Item $options.FileName -type file -force | Out-Null\r\n  Foreach ($tb in $db.Tables)\r\n  {\r\n   If ($tb.IsSystemObject -eq $FALSE)\r\n   {\r\n    $smoObjects = New-Object Microsoft.SqlServer.Management.Smo.UrnCollection\r\n    $smoObjects.Add($tb.Urn)\r\n    $scr.Script($smoObjects)\r\n   }\r\n  }\r\n\r\n  #=============\r\n  # Views\r\n  #=============\r\n  $options.FileName = $scriptpath + \"\\$($dbname)_views.sql\"\r\n  New-Item $options.FileName -type file -force | Out-Null\r\n  $views = $db.Views | where {$_.IsSystemObject -eq $false}\r\n  Foreach ($view in $views)\r\n  {\r\n    if ($views -ne $null)\r\n    {\r\n     $scr.Script($view)\r\n   }\r\n  }\r\n\r\n  #=============\r\n  # StoredProcedures\r\n  #=============\r\n  $StoredProcedures = $db.StoredProcedures | where {$_.IsSystemObject -eq $false}\r\n  $options.FileName = $scriptpath + \"\\$($dbname)_stored_procs.sql\"\r\n  New-Item $options.FileName -type file -force | Out-Null\r\n  Foreach ($StoredProcedure in $StoredProcedures)\r\n  {\r\n    if ($StoredProcedures -ne $null)\r\n    {   \r\n     $scr.Script($StoredProcedure)\r\n   }\r\n  } \r\n\r\n  #=============\r\n  # Functions\r\n  #=============\r\n  $UserDefinedFunctions = $db.UserDefinedFunctions | where {$_.IsSystemObject -eq $false}\r\n  $options.FileName = $scriptpath + \"\\$($dbname)_functions.sql\"\r\n  New-Item $options.FileName -type file -force | Out-Null\r\n  Foreach ($function in $UserDefinedFunctions)\r\n  {\r\n    if ($UserDefinedFunctions -ne $null)\r\n    {\r\n     $scr.Script($function)\r\n   }\r\n  } \r\n\r\n  #=============\r\n  # DBTriggers\r\n  #=============\r\n  $DBTriggers = $db.Triggers\r\n  $options.FileName = $scriptpath + \"\\$($dbname)_db_triggers.sql\"\r\n  New-Item $options.FileName -type file -force | Out-Null\r\n  foreach ($trigger in $db.triggers)\r\n  {\r\n    if ($DBTriggers -ne $null)\r\n    {\r\n      $scr.Script($DBTriggers)\r\n    }\r\n  }\r\n\r\n  #=============\r\n  # Table Triggers\r\n  #=============\r\n  $options.FileName = $scriptpath + \"\\$($dbname)_table_triggers.sql\"\r\n  New-Item $options.FileName -type file -force | Out-Null\r\n  Foreach ($tb in $db.Tables)\r\n  {     \r\n    if($tb.triggers -ne $null)\r\n    {\r\n      foreach ($trigger in $tb.triggers)\r\n      {\r\n        $scr.Script($trigger)\r\n      }\r\n    }\r\n  } \r\n}\r\n\r\n#=============\r\n# Execute\r\n#=============\r\n#GenerateDBScript $args[0] $args[1] $args[2]\r\n\r\n$conn = New-Object Microsoft.SqlServer.Management.Common.ServerConnection\r\n$conn.ConnectionString = \"Data Source=\u003cSERVER\u003e;Initial Catalog=\u003cDATABASE\u003e;User ID=\u003cUSER\u003e;Password=\u003cPASSWORD\u003e;MultipleActiveResultSets=True;Application Name=Powershell\"\r\n\r\n\r\nGenerateDBScript $conn \"AdventureWorks\" \"C:\\Users\\Public\\Export\"\r\n```","Link":"export-sql-schema---powershell","Created":"6-1-2020","Category":"pshell"},{"Title":"Get-FileHash - Powershell","Markdown":"#Get-FileHash - Powershell\r\n\r\nWhile testing with NPM tarballs, wanted a way to test the file hash. This is how you would do that in PowerShell.\r\n\r\n```ps\r\nGet-FileHash \"C:\\addressbook-1.0.0.tgz\" -Algorithm SHA1 | Format-List\r\n\r\n# Output: E7A679539C32C66FE23281F3727081D3AE5077CB\r\n```","Link":"get-filehash---powershell","Created":"6-1-2020","Category":"pshell"},{"Title":"Get-NPM - Powershell","Markdown":"#Get-NPM - PowerShell\r\n\r\nWhile looking into build an on-permise NPM server, was looking for ways to download a cache version of other npm packages. This is my attempt in PowerShell to replicate what Node NPM was doing.\r\n\r\n```ps\r\n#\r\n# Author: Jeremy Travis\r\n \r\n$npm = \"https://registry.npmjs.org/\"\r\n$baseDir = \"E:\\NPM\\\"\r\n \r\nFunction Get-NPM {\r\n[cmdletbinding()]\r\nParam ([string]$name, [string]$version)\r\n    Process \r\n    {\r\n        Clear-Host\r\n \r\n        $temp = $name\r\n \r\n        #do we need to parse name??\r\n        if ($name.Contains(\"/\")) \r\n        {\r\n            $name = $name.Split(\"/\")[1]\r\n        }\r\n \r\n        $outFile = $baseDir + $name + \".json\"\r\n \r\n        Invoke-WebRequest -Uri ($npm + $temp) -OutFile $outFile\r\n \r\n        Read-JSON -FilePath $outFile -Version $version        \r\n    }\r\n}\r\n\r\nFunction Read-JSON\r\n{\r\n[cmdletbinding()]\r\nParam ([string]$FilePath, [string]$Version)\r\n    Process\r\n    {\r\n        try\r\n        {\r\n            Write-Host (\"Processing: \" + $FilePath) -BackgroundColor Yellow -ForegroundColor Black\r\n            $data = Get-Content -Raw -Path $FilePath | ConvertFrom-Json\r\n        }\r\n        catch\r\n        {\r\n            Write-Host (\"(Read-JSON)Error processing JSON: \" + $File) -ForegroundColor Red\r\n            return\r\n        }\r\n \r\n        $latest = $data.\u0027dist-tags\u0027.latest\r\n        #did user ask for a version??\r\n        if ($Version -ne $null -and $Version -match \u0027\"(?\u003cver\u003e\\d.\\d.\\d)\"\u0027)\r\n        {\r\n            #$Version = $Version.Replace(\"^\", \"\").Replace(\"~\", \"\")\r\n            $latest = $Matches.ver\r\n        }\r\n \r\n        $id = $data._id.Replace(\"/\", \"_\")\r\n        $packageDir = ($baseDir + \"packages\\\" + $id + \"\\\")\r\n \r\n        #create staging directory \u0026 copy JSON\r\n        if(!(Test-Path $packageDir -PathType Container)) \r\n        {\r\n            mkdir $packageDir\r\n            Copy-Item -Path $FilePath -Destination $packageDir\r\n        }\r\n \r\n        $tarball = $data.versions.$latest.dist.tarball\r\n \r\n        if ($tarball -eq $null)\r\n        {\r\n            Write-Host ($data._id + $version + \" tarball, not found!\") -ForegroundColor Red\r\n            Return\r\n        }\r\n \r\n        $array = $tarball.Split(\"/\")\r\n \r\n        Download-Package -Url $tarball -Name $array[$array.length - 1]\r\n \r\n        # Process-Dependencies -File $outFile -Version $latest\r\n    }\r\n}\r\n \r\nFunction Process-Dependencies {\r\n[cmdletbinding()]\r\nParam ([string]$File, [string]$Version)\r\n    Process\r\n    {\r\n        try \r\n        {\r\n            Write-Host (\"    Processing Dependencies: \" + $FilePath) -BackgroundColor Gray\r\n            $data = Get-Content -Raw -Path $File | ConvertFrom-Json\r\n        }\r\n        catch\r\n        {\r\n            Write-Host (\"(Process-Dependencies)Error processing JSON: \" + $File) -ForegroundColor Red\r\n            return\r\n        }        \r\n \r\n        if($data.versions.$Version.dependencies -ne $null) \r\n        {\r\n            $dependencies = $data.versions.$latest.dependencies\r\n \r\n            $names = $dependencies | Get-Member -MemberType NoteProperty | select Name\r\n            $defintions = $dependencies | Get-Member -MemberType NoteProperty | select Definition\r\n \r\n            foreach($nam in $names)\r\n            {\r\n                $defintion = $defintions | Where-Object { $_.Definition -like \"*string \" + $nam.Name + \u0027*\u0027 }\r\n                $defVersion = $defintion.Definition.Split(\"=\")[1]\r\n                $id = $nam.Name.Replace(\"/\", \"_\")\r\n                Write-Host (\"      * \" + $id + \"@\" + $defVersion)\r\n \r\n                $packageDir = ($baseDir + \"packages\\\" + $id + \"\\\")\r\n                Create-Directory -Directory $packageDir\r\n \r\n                $url = $npm + $nam.Name\r\n                $outFile = $baseDir + $id + \".json\"\r\n    \r\n                #check root directory to see if already downloaded\r\n                if(!(Test-Path $outFile -PathType Leaf))\r\n                {\r\n                    #Download json config for each dependency\r\n                    Invoke-WebRequest -Uri $url -OutFile $outFile\r\n                    Copy-Item -Path $outFile -Destination $packageDir\r\n                }\r\n \r\n                Read-JSON -FilePath $outFile -Version $defVersion\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nFunction Create-Directory\r\n{\r\n[cmdletbinding()]\r\nParam ([string]$Directory)\r\n    Process\r\n    {\r\n        if(!(Test-Path $Directory -PathType Container)) {\r\n            mkdir $Directory\r\n        }\r\n    }\r\n}\r\n \r\nFunction Download-Package\r\n{\r\n[cmdletbinding()]\r\nParam ([string]$Url, [string]$Name)\r\n    Process\r\n    {\r\n        $destination = ($packageDir + $Name)\r\n        #check package directory to see if already downloaded\r\n        if(!(Test-Path $destination -PathType Leaf))\r\n        {\r\n            Invoke-WebRequest -Uri $Url -OutFile $destination\r\n            Write-Host ($Name + \" completed.\") -ForegroundColor Green\r\n        }\r\n    }\r\n}\r\n \r\nFunction Clean-Up\r\n{\r\n    #TODO: Cleanup remaing json files\r\n}\r\n\r\n\r\n\r\n\r\n\r\nGet-NPM \"@vue/cli-service\" \"3.0.4\"\r\n \r\n```\r\n\r\n\r\nNot required for the above script. Just some additional task like unzipping with 7-zip and moving files.\r\n\r\n```ps\r\n#===================================================\r\n# Extract the TAR file from the compressed TGZ file\r\n# via 7-Zip to the root directory\r\n\r\n$baseDir = \"E:\\NPM\"\r\n\r\n$dir = Get-ChildItem $baseDir\r\n$list = $dir | where {$_.Extension -eq \".tgz\"}\r\n\r\n$exe = \"C:\\Program Files\\7-Zip\\7z.exe\"\r\n\r\nforeach($file in $list)\r\n{\r\n    $arg = \u0027e \"\u0027 + $file.FullName + \u0027\" \u0027 + \u0027 -y -o\"\u0027 + $baseDir + \u0027\\TAR\"\u0027\r\n\r\n    Start-Process -FilePath $exe -WorkingDirectory $baseDir -ArgumentList $arg\r\n}\r\n\r\n#=================================================\r\n# Extract files from the compressed TAR file\r\n# via 7-Zip to the node_modules directory\r\n\r\n$baseDir = \"E:\\NPM\"\r\n\r\nif(!(Test-Path -Path ($baseDir + \"\\TAR\") -PathType Container ))\r\n{\r\n    mkdir ($baseDir + \"\\TAR\")\r\n}\r\n\r\n$dir = Get-ChildItem ($baseDir + \"\\TAR\")\r\n$list = $dir | where {$_.Extension -eq \".tar\"}\r\n\r\n$modDir = $baseDir + \"\\node_modules\"\r\n\r\nif(!(Test-Path -Path $modDir -PathType Container))\r\n{\r\n    mkdir $modDir\r\n}\r\n\r\n$exe = \"C:\\Program Files\\7-Zip\\7z.exe\"\r\n\r\nforeach($file in $list)\r\n{\r\n    $fileDir = ($modDir + \"\\\" + $file.Name.Replace(\".tar\", \"\"))\r\n\r\n    $int = $fileDir.LastIndexOf(\"-\")\r\n\r\n    $filedir = $fileDir.Substring(0, $int)\r\n\r\n    if(!(Test-Path -Path $fileDir -PathType Container))\r\n    {\r\n        mkdir $fileDir\r\n    }\r\n\r\n    $arg = \u0027x \"\u0027 + $file.FullName + \u0027\"\u0027 + \u0027 -y -o\"\u0027 + $fileDir + \u0027\"\u0027\r\n\r\n    Start-Process -FilePath $exe -WorkingDirectory $baseDir -ArgumentList $arg\r\n\r\n    Remove-Item -Path $file.FullName\r\n}\r\n\r\n#======================================================\r\n# Move files from the Package directory up one level\r\n# Deletes the emptied Package directory\r\n\r\n$baseDir = \"E:\\NPM\\node_modules\"\r\n\r\n$directories = Get-ChildItem ($baseDir) -Directory\r\n\r\nforeach($directory in $directories)\r\n{\r\n    $path = ($directory.FullName + \"\\package\")\r\n\r\n    if ((Test-Path -Path $path -PathType Container ))\r\n    {\r\n        Write-Output (\"Processing Directory: \" + $directory.Name)\r\n\r\n        ## Get all files and move them up one level in the directory\r\n        Get-ChildItem -Path $path -Recurse | Move-Item -Destination ($baseDir + \"\\\" + $directory.Name)    \r\n\r\n        Remove-Item -Path $path -Recurse\r\n    }\r\n}\r\n```","Link":"get-npm---powershell","Created":"6-1-2020","Category":"pshell"},{"Title":"Read-NpmPackageLock - Powershell","Markdown":"#Read-NpmPackageLock - Powershell\r\n\r\nThis script was use to restore NPM packages by parsing the NPM package-lock.json file. The download tarballs were saved to an on-permise NPM server.\r\n\r\n```ps\r\n#\r\n# Author: Jeremy Travis\r\n# version 1.0.0 - 11/12/2019\r\n# This script reads the package-lock.json \r\n# and downloads the tgz and the package json files\r\n\r\n$npm = \"https://registry.npmjs.org/\"\r\n$baseDir = \"E:\\NPM\\\"\r\n$packageDir = ($baseDir + \"packages\\\")\r\n\r\nFunction Read-NpmPackageLock\r\n{\r\n    Process\r\n    {\r\n        Clear-Host\r\n\r\n        $FilePath = ($baseDir + \"package-lock.json\")\r\n        $data = Get-Content -Raw -Path $FilePath | ConvertFrom-Json\r\n\r\n        $names = $data.dependencies | Get-Member -MemberType NoteProperty | Select-Object Name\r\n\r\n        foreach ($name in $names)\r\n        {\r\n            $n = $name.Name\r\n            $directory = ($packageDir + $n)\r\n            if(!(Test-Path $directory -PathType Container)) {\r\n                mkdir $directory\r\n            }\r\n\r\n            $idx = 0\r\n            $a = $n.Split(\u0027/\u0027)\r\n\r\n            if ($a.count -gt 1)\r\n            {\r\n                $idx = 1\r\n            }            \r\n            \r\n            $outFile = ($directory.Replace(\"/\", \"\\\") + \"\\\" + $a[$idx] + \".json\")\r\n            Invoke-WebRequest -Uri ($npm + $n) -OutFile $outFile\r\n                           \r\n            Get-NpmPackage -Url $data.dependencies.$n.resolved -Name $n\r\n        }    \r\n    }\r\n}\r\n\r\nFunction Get-NpmPackage\r\n{\r\n[cmdletbinding()]\r\nParam ([string]$Url, [string]$Name)\r\n    Process\r\n    {\r\n        $destination = ($packageDir + $Name.Replace(\"/\", \"\\\"))\r\n        #check package directory to see if already downloaded\r\n        if(!(Test-Path $destination -PathType Leaf))\r\n        {\r\n            $a = $Url.Split(\u0027/\u0027)\r\n            $outFile = ($destination + \"\\\" + $a[$a.length - 1])\r\n            Invoke-WebRequest -Uri $Url -OutFile $outFile\r\n            Write-Host (\"[\" + $Name + \"] download completed.\") -ForegroundColor Green\r\n        }\r\n    }\r\n}\r\n\r\nRead-NpmPackageLock\r\n```","Link":"read-npmpackagelock---powershell","Created":"6-1-2020","Category":"pshell"},{"Title":"Rename File Extension - Powershell","Markdown":"#Rename File Extension\r\n\r\nOften times I share code via email and some mail providers; like Google, will remove/reject attachments ending in .js (javascript). Even when they are zipped. So the best way to transport safely, is too renamed to the file exenstions to .ts (typescript).\r\n\r\n```ps\r\n$dir = Get-ChildItem \"C:\\Users\\public\\source\\repos\\my-project\\src\" -Recurse\r\n$list = $dir | where {$_.Extension -eq \".js\"}\r\n\r\n\r\nforeach($file in $list)\r\n{\r\n    $file | Rename-Item -NewName { [io.path]::ChangeExtension($_.name, \"ts\")}\r\n}\r\n\r\n```","Link":"rename-file-extension---powershell","Created":"6-1-2020","Category":"pshell"},{"Title":"Reset a Forked Git Branch","Markdown":"# Reset a Forked Git branch\r\n\r\nWhile collaborating with fellow developers on Github, I find myself needing to updated my fork repository to match the original owner\u0027s repository. This is important to maintain clean up-to-date code while adding new features and bug fixes, especially after a pull request has been completed.\r\n\r\n\u003e Will need to have git installed. [link](https://git-scm.com/)\r\n\r\nAll steps are performed on MS Windows:\r\n* Open internet browser to __your__ forked repo; `master` branch\r\n* Copy \"Clone with HTTPS\" web url\r\n* Browse to a *clean* directory to clone your current `master` repository\r\n* Right-click to open context menu\r\n* Left-click `Git Bash here`\r\n* Type in `git clone ` and then paste in url you copied earlier, press Enter key\r\n    * ![image](./articles/img/git-fig1.png)\r\n* Once download completes, open internet browser to the original owner\u0027s repo that was forked.\r\n* Copy \"Clone with HTTPS\" web url. _Must be owner\u0027s repo, not your forked repo._\r\n* Back in Git Bash, type in the following: **Be sure to CD (Change Directory) into the downloaded repo directory**\r\n```bat\r\ncd ProjectRepoName\r\n\r\ngit remote add original https://github.com/\u003cOWNERS-REPO-URL\u003e.git\r\ngit fetch original\r\ngit checkout master\r\ngit reset --hard original/master  \r\ngit push origin master --force \r\n```\r\n\r\nAll done. Personally, I delete that directory create above to avoid confusion while working in my branch. Now merge up changes and submit a pull-request :)","Link":"reset-a-forked-git-branch","Created":"3-18-2020","Category":"git"},{"Title":"Simple Node Web Server","Markdown":"# Simple Node Web Server\r\n\r\nI wanted a simple web server while developing a front-end web application using Vue JS. Node Express was overkill, since I wasn\u0027t using it for production. IIS Express is alternative, but normally installed with Visual Studio. This server can be used with VS Code with the following command; `node server.js`\r\n\r\n*server.js*\r\n\r\n```js\r\nvar http = require(\u0027http\u0027);\r\nvar fs = require(\u0027fs\u0027);\r\nconst port = process.env.port || 1337;\r\nconsole.log(\"Starting server on port \" + port);\r\n\r\nvar redirectPage = \u0027\u003c!DOCTYPE html\u003e\u003chtml\u003e\u003chead\u003e\u003cmeta charset=\"utf-8\" /\u003e\u003cmeta http-equiv=\"refresh\" content=\"0; url=./dist/\" /\u003e\u003ctitle\u003e\u003c/title\u003e\u003c/head\u003e\u003cbody\u003e\u003c/body\u003e\u003c/html\u003e\u0027;\r\n\r\nhttp.createServer(function (req, res) {\r\n    //console.log(req.url);\r\n\r\n    //when empty, redirect\r\n    if (req.url === \"/\") {\r\n        res.writeHead(200, { \u0027Content-Type\u0027: \u0027text/html\u0027 });\r\n        res.write(redirectPage);\r\n        return res.end();\r\n    }\r\n\r\n    let url = req.url;\r\n\r\n    //remove any params\r\n    if (url.indexOf(\"?\") \u003e -1) {\r\n        url = url.substr(0, url.indexOf(\"?\"));\r\n    }\r\n\r\n    let ext = \"\";\r\n    if (req.url.endsWith(\"/\")) {\r\n        url = `${req.url}index.html`;\r\n        ext = \"html\";\r\n    }\r\n    else if (req.url === \"/favicon.ico\") {\r\n        //Chrome browser asking for icon\r\n        url = `/dist${req.url}`;\r\n        ext = \"ico\";\r\n    }\r\n    else if (url.lastIndexOf(\".\") \u003e -1) {\r\n        let s = url.split(\".\");\r\n        if (s.length \u003e 0 ) {\r\n            ext = s[s.length - 1];\r\n        }\r\n    }\r\n\r\n    url = \".\" + url;\r\n    fs.exists(url, function (exist) {\r\n        if (!exist) {\r\n            console.log(\"404 (Not Found): \" + url);\r\n            res.writeHead(404);\r\n            return res.end();\r\n        }\r\n        else {\r\n            var contentType = \"text/plain\";\r\n            switch (ext) {\r\n                case \"css\":\r\n                    contentType = \"text/css\";\r\n                    break;\r\n                case \"js\":\r\n                    contentType = \"application/javascript\";\r\n                    break;\r\n                case \"png\":\r\n                    contentType = \"image/png\";\r\n                    break;\r\n                case \"gif\":\r\n                    contentType = \"image/gif\";\r\n                    break;\r\n                case \"ico\":\r\n                    contentType = \"image/ico\";\r\n                    break;\r\n                case \"html\":\r\n                    contentType = \"text/html\";\r\n                    break;\r\n                case \"json\":\r\n                    contentType = \"application/json\";\r\n                    break;\r\n                case \"map\":\r\n                    contentType = \"text/plain\";\r\n                    break;\r\n                case \"woff\":\r\n                    contentType = \"font/woff\";\r\n                    break;\r\n                case \"woff2\":\r\n                    contentType = \"font/woff2\";\r\n                    break;\r\n            }\r\n            fs.readFile(url, function(err, data) {\r\n                if (err !== null) {\r\n                    res.writeHead(500);\r\n                    //res.write();\r\n                    return res.end();\r\n                }\r\n                \r\n                res.writeHead(200, {\u0027Content-Type\u0027: contentType});\r\n                res.write(data);\r\n                return res.end();\r\n            });\r\n        }\r\n    });\r\n\r\n}).listen(port);\r\n\r\n```","Link":"simple-node-web-server","Created":"5-12-2020","Category":"node"},{"Title":"Sql Connection Snippet","Markdown":"# Sql Connection Snippet\r\n\r\nCode snippets is a feature in Visual Studio to help speed development by providing common used function.\r\n\r\n\u003e Shortcut menu can be displayed by pressing `Ctrl+K` `Ctrl+X` within an open document in Visual Studio.\r\n\r\nBelow is a custom C# snippet for Visual Studio to generate code for a SQL Connection.  \r\nCreate a `FileName.snippet` file and paste content below. \r\nThen move file to `~\\Documents\\Visual Studio NNNN\\Code Snippets\\Visual C#\\My Code Snippets`.\r\n\r\n```xml\r\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e  \r\n\u003cCodeSnippets  xmlns=\"http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet\"\u003e  \r\n    \u003cCodeSnippet Format=\"1.0.0\"\u003e  \r\n        \u003cHeader\u003e  \r\n          \u003cTitle\u003eSQL Connection\u003c/Title\u003e\r\n\t\t\t    \u003cAuthor\u003eJeremy Travis\u003c/Author\u003e  \r\n\t\t\t    \u003cDescription\u003eCode snippet for SQL Connection and Query\u003c/Description\u003e\r\n\t\t\t    \u003cShortcut\u003esqlconn\u003c/Shortcut\u003e\r\n          \u003cSnippetTypes\u003e\r\n            \u003cSnippetType\u003eExpansion\u003c/SnippetType\u003e\r\n            \u003cSnippetType\u003eSurroundsWith\u003c/SnippetType\u003e\r\n          \u003c/SnippetTypes\u003e\r\n        \u003c/Header\u003e  \r\n        \u003cSnippet\u003e\r\n          \u003cDeclarations\u003e\r\n            \u003cLiteral\u003e\r\n              \u003cID\u003eSomeConnectionString\u003c/ID\u003e\r\n              \u003cToolTip\u003eReplace with your SQL connection string\u003c/ToolTip\u003e\r\n              \u003cDefault\u003eSomeConnectionString\u003c/Default\u003e\r\n            \u003c/Literal\u003e\r\n          \u003c/Declarations\u003e\r\n            \u003cCode Language=\"CSharp\" Kind=\"any\" Delimiter=\"%\"\u003e \r\n              \u003c![CDATA[\r\nstring ConStr = System.Configuration.ConfigurationManager.ConnectionStrings[\"%SomeConnectionString%\"].ConnectionString;\r\nusing(System.Data.SqlClient.SqlConnection con = new System.Data.SqlClient.SqlConnection(ConStr))\r\n{\r\n\tcon.Open();\r\n\r\n\tSystem.Text.StringBuilder sQuery = new System.Text.StringBuilder();\r\n\tsQuery.Append(\"SELECT * FROM [table]\");\r\n\r\n\tSystem.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand(sQuery.ToString(), con);\r\n\tusing (System.Data.SqlClient.SqlDataAdapter adp = new System.Data.SqlClient.SqlDataAdapter(cmd))\r\n\t{\r\n\t\tSystem.Data.DataTable dt = new System.Data.DataTable(\"Query\");\r\n\t\tadp.Fill(dt);\r\n\t}\r\n\r\n\tcon.Close();\r\n}\r\n              ]]\u003e  \r\n            \u003c/Code\u003e  \r\n        \u003c/Snippet\u003e  \r\n    \u003c/CodeSnippet\u003e  \r\n\u003c/CodeSnippets\u003e  \r\n```","Link":"sql-connection-snippet","Created":"4-22-2020","Category":"visualstudio"},{"Title":"Conditional Targeting Other Frameworks","Markdown":"# Conditional Targeting other frameworks\r\nBelow are some example how to conditionaling target other frameworks when building in .NET Core\r\n\r\n```xml\r\n\u003cItemGroup Condition=\" \u0027$(TargetFramework)\u0027 == \u0027net461\u0027 OR \u0027$(TargetFramework)\u0027 == \u0027net46\u0027 OR \u0027$(TargetFramework)\u0027 == \u0027net452\u0027 OR \u0027$(TargetFramework)\u0027 == \u0027net451\u0027 OR \u0027$(TargetFramework)\u0027 == \u0027net45\u0027\"\u003e\r\n\u003c!-- // HttpClient for full .NET --\u003e\r\n\u003cReference Include=\"System.Net.Http\" /\u003e\r\n\u003cReference Include=\"System.Web\" /\u003e\r\n\u003c/ItemGroup\u003e\r\n\r\n\u003cItemGroup Condition=\" \u0027$(TargetFramework)\u0027 == \u0027netstandard2.0\u0027 OR \u0027$(TargetFramework)\u0027 == \u0027netcoreapp2.1\u0027 \"\u003e\r\n\u003c!-- // HttpClient for .NET Core --\u003e\r\n\u003c!--\u003cPackageReference Include=\"System.Net.Http\" Version=\"4.3.3\" /\u003e--\u003e\r\n\u003c/ItemGroup\u003e\r\n```","Link":"conditional-targeting-other-frameworks","Created":"3-18-2020","Category":"dotnetcore"},{"Title":"TFS - Reparent Branches.md","Markdown":"\r\n# Reparent branches\r\ntf vc merge /recursive /baseless /version:C15662 \"C:\\Users\\KDJ\\source\\Workspaces\\WasteContainer\\Development\" \"C:\\Users\\KDJ\\source\\Workspaces\\WasteContainer\\Main\"","Created":"","Category":"other"},{"Title":"Thycotic Setup and ASP.Core Provider","Markdown":"# Thycotic Setup and ASP.Core Provider\r\n\r\nThycotic Secret Server is both a repository and SDK to store plain text in a safe way. This blog demostrates how to use secrets and injected them into your appsettings.json files.  \r\nBelow is also the sample Configuration provider written by Joe Moss and myself @ Fluor-BWXT.\r\n\r\nSee the following link for more info: [https://github.com/thycotic/sdk-documentation](https://github.com/thycotic/sdk-documentation)\r\n\r\nIn the main `appsettings.json`, add the Thycotic settings.\r\n\r\n\u003e NOTE: the RuleName and RuleKey may differ from each environment; Local, Developement, Staging, Production\r\n\r\n```json\r\n\"Thycotic\": {\r\n  \"CacheAge\": 60,\r\n  \"CacheStrategy\": 1,\r\n  \"SecretServerUrl\": \"https://DOMAIN/SecretServer/\",\r\n  \"RuleName\": \"\",\r\n  \"RuleKey\": \"\",\r\n  \"ResetToken\": \"#AnyResetT0k3nHer3WillDo!\",\r\n  \"SecretServerSdkConfigDirectory\": \"E:\\\\Thycotic\\\\MyAppName\",\r\n  \"SecretServerSdkKeyDirectory\": \"E:\\\\Thycotic\"\r\n}\r\n```\r\n\r\nNow, build the AppSettings and/or ConnectionStrings. Below are some examples using MS SQL and Oracle connections.\r\n\r\n\u003e **Important!!** Thycotic strings *must* end with a question mark follow by a number. All variables must be enclosed within ${ }.\r\n\r\n```json\r\n\"AppSettings\": {\r\n\t\"Secret\": \"${password}?587\"\r\n},\r\n\"ConnectionStrings\": {\r\n  \"MSSQL\": \"Data Source=${server};Initial Catalog=${database};User ID=${username};Password=${password};MultipleActiveResultSets=True;Application Name=WebAppName?3412\",\r\n  \"Oracle1\": \"User Id=${username};Password=${password};Data Source=${server}:${port}/${database};?1718\",\r\n  \"Oracle2\": \"Data Source=(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=${server})(PORT=${port}))(CONNECT_DATA=(SERVICE_NAME=${database})));User Id=${username};Password=${password};?1718\",\r\n  \"Oracle3\": \"User Id=${username};Password=${password};Data Source=PEMSDEV.WORLD\"\r\n}\r\n```\r\n\r\nFinally, configure the Web Host Builder.\r\n\r\n*Program.cs*\r\n\r\n```cs\r\nusing Microsoft.AspNetCore;\r\nusing Microsoft.AspNetCore.Hosting;\r\nusing Thycotic.Provider;\r\n\r\nnamespace MyApp\r\n{\r\n    public class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            CreateWebHostBuilder(args).Build().Run();\r\n        }\r\n\r\n        public static IWebHostBuilder CreateWebHostBuilder(string[] args) =\u003e\r\n            WebHost.CreateDefaultBuilder(args)\r\n                .ConfigureAppConfiguration(ThycoticConfiguration.AddThycoticConfiguration)\r\n                .UseStartup\u003cStartup\u003e();\r\n    }\r\n}\r\n```\r\n\r\nHere is a full `web.config` example.  \r\nFor Framework applications, use the following Nuget packages.\r\n* Thycotic.SecretServer.Sdk 1.4.1\r\n* Thycotic.SecretServer.Sdk.Extensions.Configuration 1.4.1\r\n* Thycotic.SecretServer.Sdk.Extensions.Integration 1.4.1\r\n* Thycotic.SecretServer.Sdk.Extensions.Integration.HttpModule 1.4.1\r\n\r\n```xml\r\n\u003cappSettings\u003e\r\n    \u003c!-- Thycotic --\u003e\r\n    \u003cadd key=\"tss:CacheAge\" value=\"60\" /\u003e\r\n    \u003cadd key=\"tss:CacheStrategy\" value=\"1\" /\u003e\r\n    \u003cadd key=\"tss:SecretServerUrl\" value=\"https://DOMAIN/SecretServer\" /\u003e\r\n    \u003cadd key=\"tss:RuleName\" value=\"\" /\u003e\r\n    \u003cadd key=\"tss:RuleKey\" value=\"\" /\u003e\r\n    \u003cadd key=\"tss:ResetToken\" value=\"#AnyResetT0k3nHer3WillDo!\" /\u003e\r\n    \u003cadd key=\"SecretServerSdkConfigDirectory\" value=\"E:\\Thycotic\\MyAppName\" /\u003e\r\n    \u003c!-- End Thycotic --\u003e\r\n    \u003cadd key=\"OtherSecret\" value=\"${password}?587\" /\u003e\r\n\u003c/appSettings\u003e\r\n\u003cconnectionStrings\u003e\r\n    \u003cadd name=\"MSSQL\" connectionString=\"Data Source=${server};Initial Catalog=WISE;User ID=${username};Password=${password};MultipleActiveResultSets=True;Application Name=MyApp?1643\" providerName=\"System.Data.SqlClient\"/\u003e\r\n\u003c/connectionStrings\u003e\r\n```\r\n\r\n## Configuration Thycotic Provider\r\n\r\nYou will the following Nuget packages:\r\n* Thycotic.SecretServer.Sdk 1.4.1\r\n* Thycotic.SecretServer.Sdk.Extensions.Integration 1.4.1\r\n\r\n```cs\r\nusing Microsoft.AspNetCore.Hosting;\r\nusing Microsoft.Extensions.Configuration;\r\nusing System;\r\nusing Thycotic.SecretServer.Sdk.Areas.Secrets.Clients;\r\nusing Thycotic.SecretServer.Sdk.Extensions.Integration.Clients;\r\nusing Thycotic.SecretServer.Sdk.Extensions.Integration.Models;\r\nusing Thycotic.SecretServer.Sdk.Infrastructure.Clients;\r\nusing Thycotic.SecretServer.Sdk.Infrastructure.DataProtection;\r\nusing Thycotic.SecretServer.Sdk.Infrastructure.Factories;\r\nusing Thycotic.SecretServer.Sdk.Infrastructure.Loggers;\r\nusing Thycotic.SecretServer.Sdk.Infrastructure.Providers;\r\n\r\nnamespace Thycotic.Provider\r\n{\r\n    public static class ThycoticConfiguration\r\n    {\r\n        public static void AddThycoticConfiguration(WebHostBuilderContext context, IConfigurationBuilder builder)\r\n        {\r\n            var configuration = builder.Build();\r\n            builder.AddThycoticProvider(configuration);\r\n        }\r\n    }\r\n\r\n    public class ThycoticProvider : ConfigurationProvider\r\n    {\r\n        private ConfigSettings _thycoticConfig;\r\n        private SecretServerClient _thycoticClient;\r\n\r\n        public ThycoticProvider(IConfiguration root)\r\n        {\r\n            this._thycoticConfig = root.GetSection(\"Thycotic\").Get\u003cConfigSettings\u003e();\r\n            if (this._thycoticConfig == null)\r\n                throw new ArgumentNullException(\"Thycotic section missing from appsettings.json\");\r\n\r\n            string path = null;\r\n            string appSetting1 = root[\"Thycotic:SecretServerSdkKeyDirectory\"];\r\n            if (!string.IsNullOrWhiteSpace(appSetting1))\r\n            {\r\n                path = appSetting1;\r\n                if (!System.IO.Directory.Exists(path))\r\n                    System.IO.Directory.CreateDirectory(path);\r\n            }\r\n\r\n            //== Build a new SecretClient vs using the built-in to allow us control over the generated cache files.\r\n            IDataProtector idataProtector = DataProtectorFactory.Create(path);\r\n            string appSetting2 = root[\"Thycotic:SecretServerSdkConfigDirectory\"];\r\n            ISdkClientConfigProvider sdkClientConfigProvider = new SdkClientConfigProvider(idataProtector, appSetting2);\r\n            ICacheClient cacheClient = new CacheClient(idataProtector, sdkClientConfigProvider);\r\n            IOAuthClient oAuthClient = new OAuthClient(sdkClientConfigProvider);\r\n            ISecretClient secretClient = new SecretClient((ILogger)new NoLogger(), (IRestClient)new RestClient(sdkClientConfigProvider), oAuthClient, cacheClient);\r\n\r\n            this._thycoticClient = new SecretServerClient(new NoLogger(), sdkClientConfigProvider, cacheClient, secretClient);\r\n            _thycoticClient.Configure(_thycoticConfig);\r\n\r\n            // This array contains the section names of the appsettings.json that we wish to replace.\r\n            string[] replacementSections = { \"ConnectionStrings\", \"AppSettings\" };\r\n\r\n            foreach (string section in replacementSections)\r\n            {\r\n                foreach (var item in root.GetSection(section).GetChildren())\r\n                {\r\n                    if (item.Value == null)\r\n                        continue;\r\n                    if ((!item.Value.Contains(\"${\") ? 0 : (item.Value.Contains(\"?\") ? 1 : 0)) == 0)\r\n                        continue;\r\n\r\n                    int secretId;\r\n                    var connParts = item.Value.Split(\u0027?\u0027);\r\n\r\n                    if (connParts.Length == 2) // Only replace if string could be split into two parts.\r\n                    {\r\n                        string itemValue = connParts[0];\r\n\r\n\r\n                        bool couldParseId = int.TryParse(connParts[1], out secretId);\r\n\r\n                        if (couldParseId) // Only replace if secret id could be parsed from string.\r\n                        {\r\n                            var secret = _thycoticClient.GetSecret(secretId);\r\n                            foreach (var secretItem in secret.Items)\r\n                            {\r\n                                itemValue = itemValue.Replace(\"${\" + secretItem.FieldName + \"}\", secretItem.ItemValue, StringComparison.CurrentCultureIgnoreCase);\r\n                            }\r\n                            Data.Add($\"{section}:{item.Key}\", itemValue);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            \r\n        }\r\n    }\r\n\r\n    public static class ConfigurationExtensions\r\n    {\r\n        public static IConfigurationBuilder AddThycoticProvider(this IConfigurationBuilder configuration, IConfiguration root)\r\n\r\n        {\r\n            configuration.Add(new ThycoticConfigurationSource(root));\r\n            return configuration;\r\n        }\r\n    }\r\n\r\n    internal class ThycoticConfigurationSource : IConfigurationSource\r\n    {\r\n        private IConfiguration configuration;\r\n\r\n        public ThycoticConfigurationSource(IConfiguration configuration)\r\n        {\r\n            this.configuration = configuration;\r\n        }\r\n\r\n        public IConfigurationProvider Build(IConfigurationBuilder builder)\r\n        {\r\n            return new ThycoticProvider(configuration);\r\n        }\r\n    }\r\n}\r\n```","Link":"thycotic-setup-and-asp.core-provider","Created":"6/17/2020","Category":"other"},{"Title":"VSCode-Tasks.md","Markdown":"{\r\n    // See https://go.microsoft.com/fwlink/?LinkId=733558\r\n    // for the documentation about the tasks.json format\r\n    \"version\": \"2.0.0\",\r\n    \"tasks\": [\r\n        {\r\n            \"label\": \"Build SASS\",\r\n            \"type\": \"shell\",\r\n            \"command\": \"sass\",\r\n            \"windows\": {\r\n                \"args\": [\"src/scss/index.scss\", \"src/contents/site.css\", \"--no-source-map\", \"--watch\"]\r\n            },\r\n            \"group\": \"build\",\r\n            \"presentation\": {\r\n                \"echo\": true,\r\n                \"reveal\": \"always\",\r\n                \"focus\": false,\r\n                \"panel\": \"shared\",\r\n                \"showReuseMessage\": true,\r\n                \"clear\": false\r\n            }\r\n        },\r\n        {\r\n            \"label\": \"Build Typescript\",\r\n            \"type\": \"typescript\",\r\n            \"tsconfig\": \"tsconfig.json\",\r\n            //\"option\": \"watch\",\r\n            \"problemMatcher\": [\r\n                \"$tsc\"\r\n            ],\r\n            \"group\": {\r\n                \"kind\": \"build\",\r\n                \"isDefault\": true\r\n            }\r\n        },\r\n        {\r\n            \"label\": \"Watch Typescript\",\r\n            \"type\": \"shell\",\r\n            \"command\": \"node\",\r\n            \"windows\": {\r\n                \"args\": [\"C:\\\\Program Files (x86)\\\\Microsoft SDKs\\\\TypeScript\\\\3.4\\\\tsc.js\", \"--watch\", \"-p\", \"${workspaceFolder}\\\\tsconfig.json\"]\r\n            },\r\n            \"group\": \"none\",\r\n            \"presentation\": {\r\n                \"echo\": true,\r\n                \"reveal\": \"always\",\r\n                \"focus\": false,\r\n                \"panel\": \"shared\",\r\n                \"showReuseMessage\": true,\r\n                \"clear\": false\r\n            }\r\n        },\r\n        {\r\n            \"label\": \"Run IIS Express\",\r\n            \"type\": \"process\",\r\n            \"command\": \"C:\\\\Program Files (x86)\\\\IIS Express\\\\iisexpress.exe\",\r\n            \"windows\": {\r\n                //\"args\": [\"/config:..\\\\.vs\\\\config\\\\applicationhost.config\", \"/systray:true\", \"/siteid:2\"]\r\n                \"args\": [\"/path:${workspaceFolder}\\\\src\", \"/port:60960\", \"/systray:true\"]\r\n            },\r\n            \"group\": \"none\",\r\n            \"presentation\": {\r\n                \"echo\": true,\r\n                \"reveal\": \"always\",\r\n                \"focus\": false,\r\n                \"panel\": \"shared\",\r\n                \"showReuseMessage\": true,\r\n                \"clear\": false\r\n            }\r\n        },\r\n        {\r\n            \"label\": \"Rollup\",\r\n            \"type\": \"shell\",\r\n            \"command\": \"rollup\",\r\n            \"windows\": {\r\n                \"args\": [\"-c\", \"--watch\"]\r\n            },\r\n            \"group\": {\r\n                \"kind\": \"build\",\r\n                \"isDefault\": true\r\n            }\r\n        }\r\n    ]\r\n}","Created":"","Category":"other"},{"Title":"Vue Component Snippet","Markdown":"# Vue Component Snippet\r\n\r\nCode snippets is a feature in Visual Studio to help speed development by providing common used function.\r\n\r\n\u003e Shortcut menu can be displayed by pressing `Ctrl+K` `Ctrl+X` within an open document in Visual Studio.\r\n\r\nBelow is a custom Typescript snippet for Visual Studio to generate code for a Vue component mixin.  \r\nCreate a `FileName.snippet` file and paste content below. \r\nThen move file to `~\\Documents\\Visual Studio NNNN\\Code Snippets\\TypeScript\\My Code Snippets`.\r\n\r\n```xml\r\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e  \r\n\u003cCodeSnippets  xmlns=\"http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet\"\u003e  \r\n    \u003cCodeSnippet Format=\"1.0.0\"\u003e  \r\n        \u003cHeader\u003e  \r\n          \u003cTitle\u003eVue Component\u003c/Title\u003e\r\n\t\t\t    \u003cAuthor\u003eJeremy Travis\u003c/Author\u003e  \r\n\t\t\t    \u003cDescription\u003eCode snippet for Vue Component\u003c/Description\u003e\r\n\t\t\t    \u003cShortcut\u003evuecomp\u003c/Shortcut\u003e\r\n          \u003cSnippetTypes\u003e\r\n            \u003cSnippetType\u003eExpansion\u003c/SnippetType\u003e\r\n            \u003cSnippetType\u003eSurroundsWith\u003c/SnippetType\u003e\r\n          \u003c/SnippetTypes\u003e\r\n        \u003c/Header\u003e  \r\n        \u003cSnippet\u003e\r\n          \u003cDeclarations\u003e\r\n            \u003cLiteral\u003e\r\n              \u003cID\u003ename\u003c/ID\u003e\r\n              \u003cToolTip\u003eComponent Name\u003c/ToolTip\u003e\r\n              \u003cDefault\u003enew-component\u003c/Default\u003e\r\n            \u003c/Literal\u003e\r\n          \u003c/Declarations\u003e\r\n            \u003cCode Language=\"TypeScript\" Kind=\"any\" Delimiter=\"%\"\u003e \r\n              \u003c![CDATA[\r\nimport { ComponentOptions } from \"vue\";\r\n\r\nexport default {\r\n    name: \"%name%\",\r\n    components: { },\r\n    template: `\u003cdiv\u003e\u003c/div\u003e`,\r\n    data() {\r\n        return {}\r\n    },\r\n    props: {\r\n        someProps: {\r\n            type: String,\r\n            required: false,\r\n            default: \"\"\r\n        }\r\n    },\r\n    methods: {\r\n        MyAction(e: KeyboardEvent) {\r\n        }\r\n    }\r\n} as ComponentOptions\u003cany\u003e\r\n              ]]\u003e  \r\n            \u003c/Code\u003e  \r\n        \u003c/Snippet\u003e  \r\n    \u003c/CodeSnippet\u003e  \r\n\u003c/CodeSnippets\u003e    \r\n```","Link":"vue-component-snippet","Created":"4-22-2020","Category":"visualstudio"},{"Title":"Vue Template Snippet","Markdown":"# Vue Template Snippet\r\n\r\nCode snippets is a feature in Visual Studio to help speed development by providing common used function.\r\n\r\n\u003e Shortcut menu can be displayed by pressing `Ctrl+K` `Ctrl+X` within an open document in Visual Studio.\r\n\r\nBelow is a custom Typescript snippet for Visual Studio to generate code for a Vue template.  \r\nCreate a `FileName.snippet` file and paste content below. \r\nThen move file to `~\\Documents\\Visual Studio NNNN\\Code Snippets\\Custom`.\r\n\r\nHad to copy to the Custom folder to work it a `.vue` file type.\r\n\r\n```xml\r\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e  \r\n\u003cCodeSnippets  xmlns=\"http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet\"\u003e  \r\n    \u003cCodeSnippet Format=\"1.0.0\"\u003e  \r\n        \u003cHeader\u003e  \r\n          \u003cTitle\u003eVue Template\u003c/Title\u003e\r\n\t\t\t    \u003cAuthor\u003eJeremy Travis\u003c/Author\u003e  \r\n\t\t\t    \u003cDescription\u003eCode snippet for Vue template\u003c/Description\u003e\r\n\t\t\t    \u003cShortcut\u003evuecomp\u003c/Shortcut\u003e\r\n          \u003cSnippetTypes\u003e\r\n            \u003cSnippetType\u003eExpansion\u003c/SnippetType\u003e\r\n            \u003cSnippetType\u003eSurroundsWith\u003c/SnippetType\u003e\r\n          \u003c/SnippetTypes\u003e\r\n        \u003c/Header\u003e  \r\n        \u003cSnippet\u003e\r\n          \u003cDeclarations\u003e\r\n            \u003cLiteral\u003e\r\n              \u003cID\u003ename\u003c/ID\u003e\r\n              \u003cToolTip\u003eClass Name\u003c/ToolTip\u003e\r\n              \u003cDefault\u003eMyClass\u003c/Default\u003e\r\n            \u003c/Literal\u003e\r\n          \u003c/Declarations\u003e\r\n            \u003cCode Language=\"HTML\" Kind=\"any\" Delimiter=\"%\"\u003e \r\n\u003c![CDATA[\u003ctemplate\u003e\r\n    \u003cdiv\u003e\u003c/div\u003e\r\n\u003c/template\u003e\r\n\r\n\u003cscript lang=\"ts\"\u003e\r\n    import { Component, Vue } from \"vue-property-decorator\";\r\n\r\n    @Component({})\r\n    export default class %name% extends Vue { }\r\n\u003c/script\u003e\r\n\r\n\u003cstyle lang=\"scss\"\u003e\u003c/style\u003e]]\u003e  \r\n            \u003c/Code\u003e  \r\n        \u003c/Snippet\u003e  \r\n    \u003c/CodeSnippet\u003e  \r\n\u003c/CodeSnippets\u003e   \r\n```","Link":"vue-template-snippet","Created":"4-22-2020","Category":"visualstudio"},{"Title":"Welcome Page","Markdown":"# Welcome\r\n\r\n\u003e This is a blockquote\r\n\r\n*Sample Code Snippet*\r\n```js\r\nfunction TEST() {\r\n    console.log(\"Hello World\");\r\n}\r\n```\r\n","Link":"welcome-page","Created":"3-18-2020","Category":"other"}]}